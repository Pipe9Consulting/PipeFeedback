//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CheckSite.Common {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Common.Common")]
    public interface Common {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadAreaOfPartner", ReplyAction="http://tempuri.org/Common/LoadAreaOfPartnerResponse")]
        bExcellent.Service.Util.Domain.Zone[] LoadAreaOfPartner(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadAreaOfPartner", ReplyAction="http://tempuri.org/Common/LoadAreaOfPartnerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Zone[]> LoadAreaOfPartnerAsync(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadTimeZoneOfPartner", ReplyAction="http://tempuri.org/Common/LoadTimeZoneOfPartnerResponse")]
        bExcellent.Service.Util.Domain.TimeZone[] LoadTimeZoneOfPartner(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadTimeZoneOfPartner", ReplyAction="http://tempuri.org/Common/LoadTimeZoneOfPartnerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.TimeZone[]> LoadTimeZoneOfPartnerAsync(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadCountryOfPartner", ReplyAction="http://tempuri.org/Common/LoadCountryOfPartnerResponse")]
        bExcellent.Service.Util.Domain.Country[] LoadCountryOfPartner(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadCountryOfPartner", ReplyAction="http://tempuri.org/Common/LoadCountryOfPartnerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Country[]> LoadCountryOfPartnerAsync(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadCountryByAreaId", ReplyAction="http://tempuri.org/Common/LoadCountryByAreaIdResponse")]
        bExcellent.Service.Util.Domain.Country[] LoadCountryByAreaId(int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadCountryByAreaId", ReplyAction="http://tempuri.org/Common/LoadCountryByAreaIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Country[]> LoadCountryByAreaIdAsync(int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadAreaByZoneId", ReplyAction="http://tempuri.org/Common/LoadAreaByZoneIdResponse")]
        bExcellent.Service.Util.Domain.Zone[] LoadAreaByZoneId(int zoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadAreaByZoneId", ReplyAction="http://tempuri.org/Common/LoadAreaByZoneIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Zone[]> LoadAreaByZoneIdAsync(int zoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadPartnersByAreaId", ReplyAction="http://tempuri.org/Common/LoadPartnersByAreaIdResponse")]
        bExcellent.Service.Util.Domain.User[] LoadPartnersByAreaId(int userid, int designationId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadPartnersByAreaId", ReplyAction="http://tempuri.org/Common/LoadPartnersByAreaIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadPartnersByAreaIdAsync(int userid, int designationId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadPartnersByCountryId", ReplyAction="http://tempuri.org/Common/LoadPartnersByCountryIdResponse")]
        bExcellent.Service.Util.Domain.User[] LoadPartnersByCountryId(int userid, int designationId, int countryId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadPartnersByCountryId", ReplyAction="http://tempuri.org/Common/LoadPartnersByCountryIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadPartnersByCountryIdAsync(int userid, int designationId, int countryId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadPartnersByZoneId", ReplyAction="http://tempuri.org/Common/LoadPartnersByZoneIdResponse")]
        bExcellent.Service.Util.Domain.User[] LoadPartnersByZoneId(int userid, int designationId, int zoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadPartnersByZoneId", ReplyAction="http://tempuri.org/Common/LoadPartnersByZoneIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadPartnersByZoneIdAsync(int userid, int designationId, int zoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartnersByZone", ReplyAction="http://tempuri.org/Common/GetOverallPartnersByZoneResponse")]
        bExcellent.Service.Util.Response.Partner[] GetOverallPartnersByZone(int userid, int designationId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartnersByZone", ReplyAction="http://tempuri.org/Common/GetOverallPartnersByZoneResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersByZoneAsync(int userid, int designationId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartnersByArea", ReplyAction="http://tempuri.org/Common/GetOverallPartnersByAreaResponse")]
        bExcellent.Service.Util.Response.Partner[] GetOverallPartnersByArea(int userid, int designationId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartnersByArea", ReplyAction="http://tempuri.org/Common/GetOverallPartnersByAreaResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersByAreaAsync(int userid, int designationId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartnersByCountry", ReplyAction="http://tempuri.org/Common/GetOverallPartnersByCountryResponse")]
        bExcellent.Service.Util.Response.Partner[] GetOverallPartnersByCountry(int userid, int designationId, int countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartnersByCountry", ReplyAction="http://tempuri.org/Common/GetOverallPartnersByCountryResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersByCountryAsync(int userid, int designationId, int countryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartnerName", ReplyAction="http://tempuri.org/Common/GetPartnerNameResponse")]
        string GetPartnerName(string mplId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartnerName", ReplyAction="http://tempuri.org/Common/GetPartnerNameResponse")]
        System.Threading.Tasks.Task<string> GetPartnerNameAsync(string mplId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPSEUserId", ReplyAction="http://tempuri.org/Common/GetPSEUserIdResponse")]
        int GetPSEUserId(string emailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPSEUserId", ReplyAction="http://tempuri.org/Common/GetPSEUserIdResponse")]
        System.Threading.Tasks.Task<int> GetPSEUserIdAsync(string emailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartnerId", ReplyAction="http://tempuri.org/Common/GetPartnerIdResponse")]
        int GetPartnerId(string mplId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartnerId", ReplyAction="http://tempuri.org/Common/GetPartnerIdResponse")]
        System.Threading.Tasks.Task<int> GetPartnerIdAsync(string mplId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/InsertPartnerMapping", ReplyAction="http://tempuri.org/Common/InsertPartnerMappingResponse")]
        void InsertPartnerMapping(int userId, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/InsertPartnerMapping", ReplyAction="http://tempuri.org/Common/InsertPartnerMappingResponse")]
        System.Threading.Tasks.Task InsertPartnerMappingAsync(int userId, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPSEReports", ReplyAction="http://tempuri.org/Common/GetPSEReportsResponse")]
        bExcellent.Service.Util.Response.PSEReports GetPSEReports(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPSEReports", ReplyAction="http://tempuri.org/Common/GetPSEReportsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.PSEReports> GetPSEReportsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPSMReports", ReplyAction="http://tempuri.org/Common/GetPSMReportsResponse")]
        bExcellent.Service.Util.Response.PSMReports[] GetPSMReports(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPSMReports", ReplyAction="http://tempuri.org/Common/GetPSMReportsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.PSMReports[]> GetPSMReportsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAreaReports", ReplyAction="http://tempuri.org/Common/GetAreaReportsResponse")]
        bExcellent.Service.Util.Response.TopLeadsReport GetAreaReports(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAreaReports", ReplyAction="http://tempuri.org/Common/GetAreaReportsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.TopLeadsReport> GetAreaReportsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTimeZoneReports", ReplyAction="http://tempuri.org/Common/GetTimeZoneReportsResponse")]
        bExcellent.Service.Util.Response.TopLeadsReport GetTimeZoneReports(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTimeZoneReports", ReplyAction="http://tempuri.org/Common/GetTimeZoneReportsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.TopLeadsReport> GetTimeZoneReportsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPoEsByUserId", ReplyAction="http://tempuri.org/Common/GetPoEsByUserIdResponse")]
        bExcellent.Service.Util.Domain.MinimizedPOE[] GetPoEsByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPoEsByUserId", ReplyAction="http://tempuri.org/Common/GetPoEsByUserIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetPoEsByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMySubscribedPoes", ReplyAction="http://tempuri.org/Common/GetMySubscribedPoesResponse")]
        bExcellent.Service.Util.Domain.MinimizedPOE[] GetMySubscribedPoes(int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMySubscribedPoes", ReplyAction="http://tempuri.org/Common/GetMySubscribedPoesResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetMySubscribedPoesAsync(int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMySubscribedPoeList", ReplyAction="http://tempuri.org/Common/GetMySubscribedPoeListResponse")]
        bExcellent.Service.Util.Domain.MinimizedPOE[] GetMySubscribedPoeList(int userid, int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMySubscribedPoeList", ReplyAction="http://tempuri.org/Common/GetMySubscribedPoeListResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetMySubscribedPoeListAsync(int userid, int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserMappingDetails", ReplyAction="http://tempuri.org/Common/GetUserMappingDetailsResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetUserMappingDetails(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserMappingDetails", ReplyAction="http://tempuri.org/Common/GetUserMappingDetailsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetUserMappingDetailsAsync(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAccountDetail", ReplyAction="http://tempuri.org/Common/GetAccountDetailResponse")]
        bExcellent.Service.Util.Domain.Accounts[] GetAccountDetail(int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAccountDetail", ReplyAction="http://tempuri.org/Common/GetAccountDetailResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Accounts[]> GetAccountDetailAsync(int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPoeContent", ReplyAction="http://tempuri.org/Common/GetPoeContentResponse")]
        bExcellent.Service.Util.Domain.PoeModules GetPoeContent(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPoeContent", ReplyAction="http://tempuri.org/Common/GetPoeContentResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.PoeModules> GetPoeContentAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRole", ReplyAction="http://tempuri.org/Common/GetUserRoleResponse")]
        int GetUserRole(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRole", ReplyAction="http://tempuri.org/Common/GetUserRoleResponse")]
        System.Threading.Tasks.Task<int> GetUserRoleAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyTeammembers", ReplyAction="http://tempuri.org/Common/GetMyTeammembersResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyTeammembers(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyTeammembers", ReplyAction="http://tempuri.org/Common/GetMyTeammembersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyTeammembersAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyGiveFbTeam", ReplyAction="http://tempuri.org/Common/GetMyGiveFbTeamResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyGiveFbTeam(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyGiveFbTeam", ReplyAction="http://tempuri.org/Common/GetMyGiveFbTeamResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyGiveFbTeamAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyGiveFbTeamList", ReplyAction="http://tempuri.org/Common/GetMyGiveFbTeamListResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyGiveFbTeamList(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyGiveFbTeamList", ReplyAction="http://tempuri.org/Common/GetMyGiveFbTeamListResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyGiveFbTeamListAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyReceiveFbTeam", ReplyAction="http://tempuri.org/Common/GetMyReceiveFbTeamResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyReceiveFbTeam(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyReceiveFbTeam", ReplyAction="http://tempuri.org/Common/GetMyReceiveFbTeamResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyReceiveFbTeamAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyManagersFeedback", ReplyAction="http://tempuri.org/Common/GetMyManagersFeedbackResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyManagersFeedback(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyManagersFeedback", ReplyAction="http://tempuri.org/Common/GetMyManagersFeedbackResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyManagersFeedbackAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyReceiveFbTeamList", ReplyAction="http://tempuri.org/Common/GetMyReceiveFbTeamListResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyReceiveFbTeamList(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyReceiveFbTeamList", ReplyAction="http://tempuri.org/Common/GetMyReceiveFbTeamListResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyReceiveFbTeamListAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyManager", ReplyAction="http://tempuri.org/Common/GetMyManagerResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyManager(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyManager", ReplyAction="http://tempuri.org/Common/GetMyManagerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyManagerAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyCustomers", ReplyAction="http://tempuri.org/Common/GetMyCustomersResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyCustomers(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyCustomers", ReplyAction="http://tempuri.org/Common/GetMyCustomersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyCustomersAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyPeers", ReplyAction="http://tempuri.org/Common/GetMyPeersResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyPeers(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyPeers", ReplyAction="http://tempuri.org/Common/GetMyPeersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyPeersAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyFullNetwork", ReplyAction="http://tempuri.org/Common/GetMyFullNetworkResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyFullNetwork(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyFullNetwork", ReplyAction="http://tempuri.org/Common/GetMyFullNetworkResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyFullNetworkAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetNetworksUsersWall", ReplyAction="http://tempuri.org/Common/GetNetworksUsersWallResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetNetworksUsersWall(int userId, int POEId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetNetworksUsersWall", ReplyAction="http://tempuri.org/Common/GetNetworksUsersWallResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetNetworksUsersWallAsync(int userId, int POEId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyNetworkCount", ReplyAction="http://tempuri.org/Common/GetMyNetworkCountResponse")]
        int GetMyNetworkCount(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyNetworkCount", ReplyAction="http://tempuri.org/Common/GetMyNetworkCountResponse")]
        System.Threading.Tasks.Task<int> GetMyNetworkCountAsync(int userId, int poeId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserDetailsByEmailId", ReplyAction="http://tempuri.org/Common/GetUserDetailsByEmailIdResponse")]
        bExcellent.Service.Util.Domain.User GetUserDetailsByEmailId(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserDetailsByEmailId", ReplyAction="http://tempuri.org/Common/GetUserDetailsByEmailIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User> GetUserDetailsByEmailIdAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyDetail", ReplyAction="http://tempuri.org/Common/GetMyDetailResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping GetMyDetail(int userid, int poeid, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyDetail", ReplyAction="http://tempuri.org/Common/GetMyDetailResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetMyDetailAsync(int userid, int poeid, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyDetailWithArea", ReplyAction="http://tempuri.org/Common/GetMyDetailWithAreaResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping GetMyDetailWithArea(int userid, int poeid, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyDetailWithArea", ReplyAction="http://tempuri.org/Common/GetMyDetailWithAreaResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetMyDetailWithAreaAsync(int userid, int poeid, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAllCounties", ReplyAction="http://tempuri.org/Common/GetAllCountiesResponse")]
        bExcellent.Service.Util.Domain.Country[] GetAllCounties();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAllCounties", ReplyAction="http://tempuri.org/Common/GetAllCountiesResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Country[]> GetAllCountiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAllArea", ReplyAction="http://tempuri.org/Common/GetAllAreaResponse")]
        bExcellent.Service.Util.Domain.Zone[] GetAllArea();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAllArea", ReplyAction="http://tempuri.org/Common/GetAllAreaResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Zone[]> GetAllAreaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPhoto", ReplyAction="http://tempuri.org/Common/GetUserPhotoResponse")]
        bExcellent.Service.Util.Domain.User GetUserPhoto(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPhoto", ReplyAction="http://tempuri.org/Common/GetUserPhotoResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User> GetUserPhotoAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateUserPhoto", ReplyAction="http://tempuri.org/Common/UpdateUserPhotoResponse")]
        bool UpdateUserPhoto(int userId, byte[] photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateUserPhoto", ReplyAction="http://tempuri.org/Common/UpdateUserPhotoResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserPhotoAsync(int userId, byte[] photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateUserDetails", ReplyAction="http://tempuri.org/Common/UpdateUserDetailsResponse")]
        bool UpdateUserDetails(string firstName, string lastName, string companyName, string jobTitle, int countryId, int userId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateUserDetails", ReplyAction="http://tempuri.org/Common/UpdateUserDetailsResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserDetailsAsync(string firstName, string lastName, string companyName, string jobTitle, int countryId, int userId, int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdatePassword", ReplyAction="http://tempuri.org/Common/UpdatePasswordResponse")]
        bool UpdatePassword(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdatePassword", ReplyAction="http://tempuri.org/Common/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdatePasswordAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPassword", ReplyAction="http://tempuri.org/Common/GetPasswordResponse")]
        bool GetPassword(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPassword", ReplyAction="http://tempuri.org/Common/GetPasswordResponse")]
        System.Threading.Tasks.Task<bool> GetPasswordAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CheckEmailId", ReplyAction="http://tempuri.org/Common/CheckEmailIdResponse")]
        bool CheckEmailId(string EmailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CheckEmailId", ReplyAction="http://tempuri.org/Common/CheckEmailIdResponse")]
        System.Threading.Tasks.Task<bool> CheckEmailIdAsync(string EmailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdatePageMode", ReplyAction="http://tempuri.org/Common/UpdatePageModeResponse")]
        void UpdatePageMode(int userid, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdatePageMode", ReplyAction="http://tempuri.org/Common/UpdatePageModeResponse")]
        System.Threading.Tasks.Task UpdatePageModeAsync(int userid, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPoeName", ReplyAction="http://tempuri.org/Common/GetPoeNameResponse")]
        string GetPoeName(int poeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPoeName", ReplyAction="http://tempuri.org/Common/GetPoeNameResponse")]
        System.Threading.Tasks.Task<string> GetPoeNameAsync(int poeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPasswordForUSer", ReplyAction="http://tempuri.org/Common/GetPasswordForUSerResponse")]
        string GetPasswordForUSer(string emailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPasswordForUSer", ReplyAction="http://tempuri.org/Common/GetPasswordForUSerResponse")]
        System.Threading.Tasks.Task<string> GetPasswordForUSerAsync(string emailid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CheckMapping", ReplyAction="http://tempuri.org/Common/CheckMappingResponse")]
        int CheckMapping(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CheckMapping", ReplyAction="http://tempuri.org/Common/CheckMappingResponse")]
        System.Threading.Tasks.Task<int> CheckMappingAsync(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserSubscriptions", ReplyAction="http://tempuri.org/Common/GetUserSubscriptionsResponse")]
        bExcellent.Service.Util.Domain.Network[] GetUserSubscriptions(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserSubscriptions", ReplyAction="http://tempuri.org/Common/GetUserSubscriptionsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network[]> GetUserSubscriptionsAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMySubscription", ReplyAction="http://tempuri.org/Common/GetMySubscriptionResponse")]
        bExcellent.Service.Util.Domain.Network[] GetMySubscription(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMySubscription", ReplyAction="http://tempuri.org/Common/GetMySubscriptionResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network[]> GetMySubscriptionAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyActivities", ReplyAction="http://tempuri.org/Common/GetMyActivitiesResponse")]
        bExcellent.Service.DataAccess.V3_GetMyActivitiesResult[] GetMyActivities(int userId, int subscriptionId, int sourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyActivities", ReplyAction="http://tempuri.org/Common/GetMyActivitiesResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.DataAccess.V3_GetMyActivitiesResult[]> GetMyActivitiesAsync(int userId, int subscriptionId, int sourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserList", ReplyAction="http://tempuri.org/Common/GetUserListResponse")]
        bExcellent.Service.DataAccess.V3_GetUserListByBatchIdResult[] GetUserList(string batchid, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserList", ReplyAction="http://tempuri.org/Common/GetUserListResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.DataAccess.V3_GetUserListByBatchIdResult[]> GetUserListAsync(string batchid, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDefaultUserSubscription", ReplyAction="http://tempuri.org/Common/GetDefaultUserSubscriptionResponse")]
        bExcellent.Service.Util.Domain.Network GetDefaultUserSubscription(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDefaultUserSubscription", ReplyAction="http://tempuri.org/Common/GetDefaultUserSubscriptionResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network> GetDefaultUserSubscriptionAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOwnNetwork", ReplyAction="http://tempuri.org/Common/GetOwnNetworkResponse")]
        bExcellent.Service.Util.Domain.Network GetOwnNetwork(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOwnNetwork", ReplyAction="http://tempuri.org/Common/GetOwnNetworkResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network> GetOwnNetworkAsync(string emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteUser", ReplyAction="http://tempuri.org/Common/DeleteUserResponse")]
        bool DeleteUser(int userid, int poeid, int subscriptionid, int level, int deleteId, int deletepeer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteUser", ReplyAction="http://tempuri.org/Common/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int userid, int poeid, int subscriptionid, int level, int deleteId, int deletepeer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateActivity", ReplyAction="http://tempuri.org/Common/CreateActivityResponse")]
        bool CreateActivity(int userid, string toids, int subid, int sourceid, string activity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateActivity", ReplyAction="http://tempuri.org/Common/CreateActivityResponse")]
        System.Threading.Tasks.Task<bool> CreateActivityAsync(int userid, string toids, int subid, int sourceid, string activity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateActivityForPathfinders", ReplyAction="http://tempuri.org/Common/CreateActivityForPathfindersResponse")]
        bool CreateActivityForPathfinders(int userid, string toids, int subid, int sourceid, string activity, int poeId, int moduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateActivityForPathfinders", ReplyAction="http://tempuri.org/Common/CreateActivityForPathfindersResponse")]
        System.Threading.Tasks.Task<bool> CreateActivityForPathfindersAsync(int userid, string toids, int subid, int sourceid, string activity, int poeId, int moduleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendConnectMail", ReplyAction="http://tempuri.org/Common/SendConnectMailResponse")]
        bool SendConnectMail(int userid, string toids, int poeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendConnectMail", ReplyAction="http://tempuri.org/Common/SendConnectMailResponse")]
        System.Threading.Tasks.Task<bool> SendConnectMailAsync(int userid, string toids, int poeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendMailFromWall", ReplyAction="http://tempuri.org/Common/SendMailFromWallResponse")]
        bool SendMailFromWall(int type, string fromname, string toIds, bool hasAttachment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendMailFromWall", ReplyAction="http://tempuri.org/Common/SendMailFromWallResponse")]
        System.Threading.Tasks.Task<bool> SendMailFromWallAsync(int type, string fromname, string toIds, bool hasAttachment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyUsers", ReplyAction="http://tempuri.org/Common/GetMyUsersResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyUsers(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyUsers", ReplyAction="http://tempuri.org/Common/GetMyUsersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyUsersAsync(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyAllUsers", ReplyAction="http://tempuri.org/Common/GetMyAllUsersResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyAllUsers(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyAllUsers", ReplyAction="http://tempuri.org/Common/GetMyAllUsersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyAllUsersAsync(int userId, int subscriptionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStanding", ReplyAction="http://tempuri.org/Common/GetStandingResponse")]
        bExcellent.Service.Util.Response.Standing GetStanding(int poeid, int userid, int tileclicked, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStanding", ReplyAction="http://tempuri.org/Common/GetStandingResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Standing> GetStandingAsync(int poeid, int userid, int tileclicked, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStandingTileScore", ReplyAction="http://tempuri.org/Common/GetStandingTileScoreResponse")]
        bExcellent.Service.Util.Response.Standing GetStandingTileScore(int poeid, int userid, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStandingTileScore", ReplyAction="http://tempuri.org/Common/GetStandingTileScoreResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Standing> GetStandingTileScoreAsync(int poeid, int userid, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAvgWcsiScore", ReplyAction="http://tempuri.org/Common/GetAvgWcsiScoreResponse")]
        bExcellent.Service.DataAccess.V3_GetStandingAvgWCSIScoreResult[] GetAvgWcsiScore(string fbid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAvgWcsiScore", ReplyAction="http://tempuri.org/Common/GetAvgWcsiScoreResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.DataAccess.V3_GetStandingAvgWCSIScoreResult[]> GetAvgWcsiScoreAsync(string fbid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRoles", ReplyAction="http://tempuri.org/Common/GetUserRolesResponse")]
        bExcellent.Service.Util.Domain.UserRole[] GetUserRoles(int userid, int subid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRoles", ReplyAction="http://tempuri.org/Common/GetUserRolesResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserRolesAsync(int userid, int subid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeByRole", ReplyAction="http://tempuri.org/Common/GetUserPoeByRoleResponse")]
        bExcellent.Service.Util.Domain.POE[] GetUserPoeByRole(int userid, int subid, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeByRole", ReplyAction="http://tempuri.org/Common/GetUserPoeByRoleResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeByRoleAsync(int userid, int subid, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeByType", ReplyAction="http://tempuri.org/Common/GetUserPoeByTypeResponse")]
        bExcellent.Service.Util.Domain.POE[] GetUserPoeByType(int userid, int subid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeByType", ReplyAction="http://tempuri.org/Common/GetUserPoeByTypeResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeByTypeAsync(int userid, int subid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SaveGoal", ReplyAction="http://tempuri.org/Common/SaveGoalResponse")]
        bool SaveGoal(bExcellent.Service.Util.Domain.GoalShare goals);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SaveGoal", ReplyAction="http://tempuri.org/Common/SaveGoalResponse")]
        System.Threading.Tasks.Task<bool> SaveGoalAsync(bExcellent.Service.Util.Domain.GoalShare goals);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SaveGoals", ReplyAction="http://tempuri.org/Common/SaveGoalsResponse")]
        bool SaveGoals(bExcellent.Service.Util.Domain.GoalShare[] goalShares);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SaveGoals", ReplyAction="http://tempuri.org/Common/SaveGoalsResponse")]
        System.Threading.Tasks.Task<bool> SaveGoalsAsync(bExcellent.Service.Util.Domain.GoalShare[] goalShares);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/AssignPoe", ReplyAction="http://tempuri.org/Common/AssignPoeResponse")]
        bool AssignPoe([System.ServiceModel.MessageParameterAttribute(Name="assignpoe")] bExcellent.Service.Util.Domain.AssignPoe[] assignpoe1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/AssignPoe", ReplyAction="http://tempuri.org/Common/AssignPoeResponse")]
        System.Threading.Tasks.Task<bool> AssignPoeAsync(bExcellent.Service.Util.Domain.AssignPoe[] assignpoe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyGoals", ReplyAction="http://tempuri.org/Common/GetMyGoalsResponse")]
        bExcellent.Service.Util.Domain.ModulesGoal[] GetMyGoals(int poeId, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyGoals", ReplyAction="http://tempuri.org/Common/GetMyGoalsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.ModulesGoal[]> GetMyGoalsAsync(int poeId, int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserdetailsByMappingId", ReplyAction="http://tempuri.org/Common/GetUserdetailsByMappingIdResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping GetUserdetailsByMappingId(int mappingid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserdetailsByMappingId", ReplyAction="http://tempuri.org/Common/GetUserdetailsByMappingIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetUserdetailsByMappingIdAsync(int mappingid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserDetailsByFbId", ReplyAction="http://tempuri.org/Common/GetUserDetailsByFbIdResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping GetUserDetailsByFbId(int fbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserDetailsByFbId", ReplyAction="http://tempuri.org/Common/GetUserDetailsByFbIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetUserDetailsByFbIdAsync(int fbId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetFeedbacksByGroupId", ReplyAction="http://tempuri.org/Common/GetFeedbacksByGroupIdResponse")]
        bExcellent.Service.Util.Response.CreatedFeedback[] GetFeedbacksByGroupId(string groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetFeedbacksByGroupId", ReplyAction="http://tempuri.org/Common/GetFeedbacksByGroupIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.CreatedFeedback[]> GetFeedbacksByGroupIdAsync(string groupid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSubscribedUserWall", ReplyAction="http://tempuri.org/Common/GetSubscribedUserWallResponse")]
        bExcellent.Service.Util.Domain.User[] GetSubscribedUserWall(int userid, int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSubscribedUserWall", ReplyAction="http://tempuri.org/Common/GetSubscribedUserWallResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetSubscribedUserWallAsync(int userid, int subId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncScores", ReplyAction="http://tempuri.org/Common/GetSyncScoresResponse")]
        bExcellent.Service.Util.Response.SyncScoreCollection GetSyncScores(int userid, int poeid, int subid, int usermapping, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncScores", ReplyAction="http://tempuri.org/Common/GetSyncScoresResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncScoresAsync(int userid, int poeid, int subid, int usermapping, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncScoresOverall", ReplyAction="http://tempuri.org/Common/GetSyncScoresOverallResponse")]
        bExcellent.Service.Util.Response.SyncScoreCollection GetSyncScoresOverall(int userid, int poeid, int subid, int usermapping, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncScoresOverall", ReplyAction="http://tempuri.org/Common/GetSyncScoresOverallResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncScoresOverallAsync(int userid, int poeid, int subid, int usermapping, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAvgSyncScores", ReplyAction="http://tempuri.org/Common/GetAvgSyncScoresResponse")]
        bExcellent.Service.Util.Response.SyncScoreCollection GetAvgSyncScores(int userid, int poeid, int subid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAvgSyncScores", ReplyAction="http://tempuri.org/Common/GetAvgSyncScoresResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetAvgSyncScoresAsync(int userid, int poeid, int subid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncScoresByFbId", ReplyAction="http://tempuri.org/Common/GetSyncScoresByFbIdResponse")]
        bExcellent.Service.Util.Response.SyncScoreCollection GetSyncScoresByFbId(int userid, int poeid, int subid, int usermapping, int type, int fbid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncScoresByFbId", ReplyAction="http://tempuri.org/Common/GetSyncScoresByFbIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncScoresByFbIdAsync(int userid, int poeid, int subid, int usermapping, int type, int fbid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncTeamScore", ReplyAction="http://tempuri.org/Common/GetSyncTeamScoreResponse")]
        bExcellent.Service.Util.Response.SyncScoreCollection GetSyncTeamScore(int userid, int poeid, int subid, int type, string groupid, int mappingid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncTeamScore", ReplyAction="http://tempuri.org/Common/GetSyncTeamScoreResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncTeamScoreAsync(int userid, int poeid, int subid, int type, string groupid, int mappingid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAvgSyncScoresByFbId", ReplyAction="http://tempuri.org/Common/GetAvgSyncScoresByFbIdResponse")]
        bExcellent.Service.Util.Response.SyncScoreCollection GetAvgSyncScoresByFbId(int userid, int poeid, int subid, int type, string fbids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetAvgSyncScoresByFbId", ReplyAction="http://tempuri.org/Common/GetAvgSyncScoresByFbIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetAvgSyncScoresByFbIdAsync(int userid, int poeid, int subid, int type, string fbids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncWcsiDiff", ReplyAction="http://tempuri.org/Common/GetSyncWcsiDiffResponse")]
        bExcellent.Service.Util.Response.SyncWcsiDiff GetSyncWcsiDiff(int userid, int poeid, int subid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSyncWcsiDiff", ReplyAction="http://tempuri.org/Common/GetSyncWcsiDiffResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncWcsiDiff> GetSyncWcsiDiffAsync(int userid, int poeid, int subid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPlanById", ReplyAction="http://tempuri.org/Common/GetPlanByIdResponse")]
        bExcellent.Service.Util.Domain.Plan GetPlanById(int planId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPlanById", ReplyAction="http://tempuri.org/Common/GetPlanByIdResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Plan> GetPlanByIdAsync(int planId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendPoePdfNotification", ReplyAction="http://tempuri.org/Common/SendPoePdfNotificationResponse")]
        void SendPoePdfNotification(string emailContents, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendPoePdfNotification", ReplyAction="http://tempuri.org/Common/SendPoePdfNotificationResponse")]
        System.Threading.Tasks.Task SendPoePdfNotificationAsync(string emailContents, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendContactMails", ReplyAction="http://tempuri.org/Common/SendContactMailsResponse")]
        void SendContactMails(string emailContents, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendContactMails", ReplyAction="http://tempuri.org/Common/SendContactMailsResponse")]
        System.Threading.Tasks.Task SendContactMailsAsync(string emailContents, string subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GenerateManagerReport", ReplyAction="http://tempuri.org/Common/GenerateManagerReportResponse")]
        bExcellent.Service.Util.Domain.ManagerReports[] GenerateManagerReport(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GenerateManagerReport", ReplyAction="http://tempuri.org/Common/GenerateManagerReportResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.ManagerReports[]> GenerateManagerReportAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GenerateTeamReport", ReplyAction="http://tempuri.org/Common/GenerateTeamReportResponse")]
        bExcellent.Service.Util.Domain.TeamReports[] GenerateTeamReport(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GenerateTeamReport", ReplyAction="http://tempuri.org/Common/GenerateTeamReportResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.TeamReports[]> GenerateTeamReportAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/InsertYammerContent", ReplyAction="http://tempuri.org/Common/InsertYammerContentResponse")]
        void InsertYammerContent(string tomailid, string frmMailid, string imageurl, string subject, string groupid, string desc, string yammertoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/InsertYammerContent", ReplyAction="http://tempuri.org/Common/InsertYammerContentResponse")]
        System.Threading.Tasks.Task InsertYammerContentAsync(string tomailid, string frmMailid, string imageurl, string subject, string groupid, string desc, string yammertoken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetYammerTopContent", ReplyAction="http://tempuri.org/Common/GetYammerTopContentResponse")]
        bExcellent.Service.Util.Domain.YammerContent[] GetYammerTopContent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetYammerTopContent", ReplyAction="http://tempuri.org/Common/GetYammerTopContentResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.YammerContent[]> GetYammerTopContentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateYammercontent", ReplyAction="http://tempuri.org/Common/UpdateYammercontentResponse")]
        void UpdateYammercontent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateYammercontent", ReplyAction="http://tempuri.org/Common/UpdateYammercontentResponse")]
        System.Threading.Tasks.Task UpdateYammercontentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetModuleCount", ReplyAction="http://tempuri.org/Common/GetModuleCountResponse")]
        int GetModuleCount(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetModuleCount", ReplyAction="http://tempuri.org/Common/GetModuleCountResponse")]
        System.Threading.Tasks.Task<int> GetModuleCountAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteExistingFeedback", ReplyAction="http://tempuri.org/Common/DeleteExistingFeedbackResponse")]
        void DeleteExistingFeedback(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteExistingFeedback", ReplyAction="http://tempuri.org/Common/DeleteExistingFeedbackResponse")]
        System.Threading.Tasks.Task DeleteExistingFeedbackAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStandingData", ReplyAction="http://tempuri.org/Common/GetStandingDataResponse")]
        bExcellent.Service.Util.Response.StandingNew GetStandingData(int poeid, int userid, int tileclicked, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStandingData", ReplyAction="http://tempuri.org/Common/GetStandingDataResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.StandingNew> GetStandingDataAsync(int poeid, int userid, int tileclicked, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTopMembers", ReplyAction="http://tempuri.org/Common/GetTopMembersResponse")]
        bExcellent.Service.Util.Domain.UserPOEMapping[] GetTopMembers(int poeid, int userid, int type, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTopMembers", ReplyAction="http://tempuri.org/Common/GetTopMembersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetTopMembersAsync(int poeid, int userid, int type, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStandingPAContent", ReplyAction="http://tempuri.org/Common/GetStandingPAContentResponse")]
        bExcellent.Service.Util.Response.StandingPAContent GetStandingPAContent(int userid, int poeid, int subid, string domain, bool cacheMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetStandingPAContent", ReplyAction="http://tempuri.org/Common/GetStandingPAContentResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.StandingPAContent> GetStandingPAContentAsync(int userid, int poeid, int subid, string domain, bool cacheMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDashBoardDetails", ReplyAction="http://tempuri.org/Common/GetDashBoardDetailsResponse")]
        bExcellent.Service.Util.Response.DashBoard GetDashBoardDetails(int userid, int subid, int poeId, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDashBoardDetails", ReplyAction="http://tempuri.org/Common/GetDashBoardDetailsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.DashBoard> GetDashBoardDetailsAsync(int userid, int subid, int poeId, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetNotUpdatedPasswordList", ReplyAction="http://tempuri.org/Common/GetNotUpdatedPasswordListResponse")]
        bExcellent.Service.Util.Domain.User[] GetNotUpdatedPasswordList(string poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetNotUpdatedPasswordList", ReplyAction="http://tempuri.org/Common/GetNotUpdatedPasswordListResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetNotUpdatedPasswordListAsync(string poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendMailForResource", ReplyAction="http://tempuri.org/Common/SendMailForResourceResponse")]
        void SendMailForResource(int fromid, string toIds, string resourceurl, string resourceTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/SendMailForResource", ReplyAction="http://tempuri.org/Common/SendMailForResourceResponse")]
        System.Threading.Tasks.Task SendMailForResourceAsync(int fromid, string toIds, string resourceurl, string resourceTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDashBoard", ReplyAction="http://tempuri.org/Common/GetDashBoardResponse")]
        bExcellent.Service.Util.Domain.DashboardModel GetDashBoard(int userId, int poeId, int subid, string domain, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDashBoard", ReplyAction="http://tempuri.org/Common/GetDashBoardResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DashboardModel> GetDashBoardAsync(int userId, int poeId, int subid, string domain, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetIndividualUserSharedGoals", ReplyAction="http://tempuri.org/Common/GetIndividualUserSharedGoalsResponse")]
        int GetIndividualUserSharedGoals(int userId, int poeId, int sharedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetIndividualUserSharedGoals", ReplyAction="http://tempuri.org/Common/GetIndividualUserSharedGoalsResponse")]
        System.Threading.Tasks.Task<int> GetIndividualUserSharedGoalsAsync(int userId, int poeId, int sharedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPathfinders", ReplyAction="http://tempuri.org/Common/GetPathfindersResponse")]
        bExcellent.Service.Util.Domain.DashboardPathFinders GetPathfinders(int userId, int poeId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPathfinders", ReplyAction="http://tempuri.org/Common/GetPathfindersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DashboardPathFinders> GetPathfindersAsync(int userId, int poeId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyManagerScore", ReplyAction="http://tempuri.org/Common/GetMyManagerScoreResponse")]
        double GetMyManagerScore(int userId, int poeid, int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetMyManagerScore", ReplyAction="http://tempuri.org/Common/GetMyManagerScoreResponse")]
        System.Threading.Tasks.Task<double> GetMyManagerScoreAsync(int userId, int poeid, int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetRecognitionCount", ReplyAction="http://tempuri.org/Common/GetRecognitionCountResponse")]
        int GetRecognitionCount(int userid, int shredId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetRecognitionCount", ReplyAction="http://tempuri.org/Common/GetRecognitionCountResponse")]
        System.Threading.Tasks.Task<int> GetRecognitionCountAsync(int userid, int shredId, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetIndividualPathfindersCount", ReplyAction="http://tempuri.org/Common/GetIndividualPathfindersCountResponse")]
        int GetIndividualPathfindersCount(int userid, int poeId, int type, int moduleId, int pathfinderUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetIndividualPathfindersCount", ReplyAction="http://tempuri.org/Common/GetIndividualPathfindersCountResponse")]
        System.Threading.Tasks.Task<int> GetIndividualPathfindersCountAsync(int userid, int poeId, int type, int moduleId, int pathfinderUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetFeedbackReceivedCount", ReplyAction="http://tempuri.org/Common/GetFeedbackReceivedCountResponse")]
        int GetFeedbackReceivedCount(int userId, int selectedUserid, int subid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetFeedbackReceivedCount", ReplyAction="http://tempuri.org/Common/GetFeedbackReceivedCountResponse")]
        System.Threading.Tasks.Task<int> GetFeedbackReceivedCountAsync(int userId, int selectedUserid, int subid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetFeedbackGivenCount", ReplyAction="http://tempuri.org/Common/GetFeedbackGivenCountResponse")]
        int GetFeedbackGivenCount(int userId, int selectedUserid, int subid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetFeedbackGivenCount", ReplyAction="http://tempuri.org/Common/GetFeedbackGivenCountResponse")]
        System.Threading.Tasks.Task<int> GetFeedbackGivenCountAsync(int userId, int selectedUserid, int subid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateUpdateUserview", ReplyAction="http://tempuri.org/Common/CreateUpdateUserviewResponse")]
        void CreateUpdateUserview(int userid, string section);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateUpdateUserview", ReplyAction="http://tempuri.org/Common/CreateUpdateUserviewResponse")]
        System.Threading.Tasks.Task CreateUpdateUserviewAsync(int userid, string section);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserNotifications", ReplyAction="http://tempuri.org/Common/GetUserNotificationsResponse")]
        bExcellent.Service.Util.Domain.Notification GetUserNotifications(int userId, int subscriptionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserNotifications", ReplyAction="http://tempuri.org/Common/GetUserNotificationsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Notification> GetUserNotificationsAsync(int userId, int subscriptionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/ReportIssue", ReplyAction="http://tempuri.org/Common/ReportIssueResponse")]
        void ReportIssue(string path, string subject, string content, byte[] strdata, string from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/ReportIssue", ReplyAction="http://tempuri.org/Common/ReportIssueResponse")]
        System.Threading.Tasks.Task ReportIssueAsync(string path, string subject, string content, byte[] strdata, string from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetConnectHistory", ReplyAction="http://tempuri.org/Common/GetConnectHistoryResponse")]
        bExcellent.Service.DataAccess.v4_GetMentorConnectHistoryResult[] GetConnectHistory(string fromId, string forId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetConnectHistory", ReplyAction="http://tempuri.org/Common/GetConnectHistoryResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.DataAccess.v4_GetMentorConnectHistoryResult[]> GetConnectHistoryAsync(string fromId, string forId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetQuestionsList", ReplyAction="http://tempuri.org/Common/GetQuestionsListResponse")]
        bExcellent.Service.Util.Domain.QuestionLists[] GetQuestionsList(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetQuestionsList", ReplyAction="http://tempuri.org/Common/GetQuestionsListResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.QuestionLists[]> GetQuestionsListAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTrackTileScore", ReplyAction="http://tempuri.org/Common/GetTrackTileScoreResponse")]
        string[] GetTrackTileScore(int poeid, int userid, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTrackTileScore", ReplyAction="http://tempuri.org/Common/GetTrackTileScoreResponse")]
        System.Threading.Tasks.Task<string[]> GetTrackTileScoreAsync(int poeid, int userid, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/TrackModuleQuestions", ReplyAction="http://tempuri.org/Common/TrackModuleQuestionsResponse")]
        bExcellent.Service.Util.Domain.TrackGoal TrackModuleQuestions(int UserId, int PoeId, int subid, string domain, int usermapping, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/TrackModuleQuestions", ReplyAction="http://tempuri.org/Common/TrackModuleQuestionsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.TrackGoal> TrackModuleQuestionsAsync(int UserId, int PoeId, int subid, string domain, int usermapping, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteGoalDate", ReplyAction="http://tempuri.org/Common/DeleteGoalDateResponse")]
        void DeleteGoalDate(int UserId, int PoeId, int QuestionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteGoalDate", ReplyAction="http://tempuri.org/Common/DeleteGoalDateResponse")]
        System.Threading.Tasks.Task DeleteGoalDateAsync(int UserId, int PoeId, int QuestionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetGoalsShared", ReplyAction="http://tempuri.org/Common/GetGoalsSharedResponse")]
        bExcellent.Service.DataAccess.v4_GetGoalssharedbyuserResult[] GetGoalsShared(int userid, int foruserid, int PoeId, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetGoalsShared", ReplyAction="http://tempuri.org/Common/GetGoalsSharedResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.DataAccess.v4_GetGoalssharedbyuserResult[]> GetGoalsSharedAsync(int userid, int foruserid, int PoeId, int subid, string domain);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeByRoleUpdated", ReplyAction="http://tempuri.org/Common/GetUserPoeByRoleUpdatedResponse")]
        bExcellent.Service.Util.Domain.POE[] GetUserPoeByRoleUpdated(int userid, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeByRoleUpdated", ReplyAction="http://tempuri.org/Common/GetUserPoeByRoleUpdatedResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeByRoleUpdatedAsync(int userid, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeManagerRole", ReplyAction="http://tempuri.org/Common/GetUserPoeManagerRoleResponse")]
        bExcellent.Service.Util.Domain.POE[] GetUserPoeManagerRole(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeManagerRole", ReplyAction="http://tempuri.org/Common/GetUserPoeManagerRoleResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeManagerRoleAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeTeamRole", ReplyAction="http://tempuri.org/Common/GetUserPoeTeamRoleResponse")]
        bExcellent.Service.Util.Domain.POE[] GetUserPoeTeamRole(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserPoeTeamRole", ReplyAction="http://tempuri.org/Common/GetUserPoeTeamRoleResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeTeamRoleAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRolesByProfile", ReplyAction="http://tempuri.org/Common/GetUserRolesByProfileResponse")]
        bExcellent.Service.Util.Domain.UserRole[] GetUserRolesByProfile(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRolesByProfile", ReplyAction="http://tempuri.org/Common/GetUserRolesByProfileResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserRolesByProfileAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserCurrentRole", ReplyAction="http://tempuri.org/Common/GetUserCurrentRoleResponse")]
        bExcellent.Service.Util.Domain.UserRole[] GetUserCurrentRole(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserCurrentRole", ReplyAction="http://tempuri.org/Common/GetUserCurrentRoleResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserCurrentRoleAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetManagerType", ReplyAction="http://tempuri.org/Common/GetManagerTypeResponse")]
        int GetManagerType(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetManagerType", ReplyAction="http://tempuri.org/Common/GetManagerTypeResponse")]
        System.Threading.Tasks.Task<int> GetManagerTypeAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetManagerDevPriorities", ReplyAction="http://tempuri.org/Common/GetManagerDevPrioritiesResponse")]
        bExcellent.Service.Util.Domain.DevelopmentPriorities[] GetManagerDevPriorities(int userId, int PoeId, int tmmappingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetManagerDevPriorities", ReplyAction="http://tempuri.org/Common/GetManagerDevPrioritiesResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DevelopmentPriorities[]> GetManagerDevPrioritiesAsync(int userId, int PoeId, int tmmappingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTeamGoalDate", ReplyAction="http://tempuri.org/Common/GetTeamGoalDateResponse")]
        bExcellent.Service.Util.Domain.GoalDate GetTeamGoalDate(int userId, int poeId, int tmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTeamGoalDate", ReplyAction="http://tempuri.org/Common/GetTeamGoalDateResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.GoalDate> GetTeamGoalDateAsync(int userId, int poeId, int tmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSelfDevPriorities", ReplyAction="http://tempuri.org/Common/GetSelfDevPrioritiesResponse")]
        bExcellent.Service.Util.Domain.DevelopmentPriorities[] GetSelfDevPriorities(int userid, int PoeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSelfDevPriorities", ReplyAction="http://tempuri.org/Common/GetSelfDevPrioritiesResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DevelopmentPriorities[]> GetSelfDevPrioritiesAsync(int userid, int PoeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateGoalDate", ReplyAction="http://tempuri.org/Common/UpdateGoalDateResponse")]
        void UpdateGoalDate(int tmid, System.DateTime goaldate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateGoalDate", ReplyAction="http://tempuri.org/Common/UpdateGoalDateResponse")]
        System.Threading.Tasks.Task UpdateGoalDateAsync(int tmid, System.DateTime goaldate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSelfGoalDate", ReplyAction="http://tempuri.org/Common/GetSelfGoalDateResponse")]
        bExcellent.Service.Util.Domain.GoalDate GetSelfGoalDate(int userId, int poeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSelfGoalDate", ReplyAction="http://tempuri.org/Common/GetSelfGoalDateResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.GoalDate> GetSelfGoalDateAsync(int userId, int poeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTeamDevProgress", ReplyAction="http://tempuri.org/Common/GetTeamDevProgressResponse")]
        bExcellent.Service.Util.Domain.Results[] GetTeamDevProgress(int userid, int poeId, int tmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetTeamDevProgress", ReplyAction="http://tempuri.org/Common/GetTeamDevProgressResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Results[]> GetTeamDevProgressAsync(int userid, int poeId, int tmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetManagerDevProgress", ReplyAction="http://tempuri.org/Common/GetManagerDevProgressResponse")]
        bExcellent.Service.Util.Domain.Results[] GetManagerDevProgress(int userid, int poeId, int tmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetManagerDevProgress", ReplyAction="http://tempuri.org/Common/GetManagerDevProgressResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Results[]> GetManagerDevProgressAsync(int userid, int poeId, int tmid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSubscripedPoeByResultMode", ReplyAction="http://tempuri.org/Common/GetSubscripedPoeByResultModeResponse")]
        bExcellent.Service.Util.Domain.MinimizedPOE[] GetSubscripedPoeByResultMode(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSubscripedPoeByResultMode", ReplyAction="http://tempuri.org/Common/GetSubscripedPoeByResultModeResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetSubscripedPoeByResultModeAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUsersListByPoE", ReplyAction="http://tempuri.org/Common/GetUsersListByPoEResponse")]
        bExcellent.Service.Util.Domain.User[] GetUsersListByPoE(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUsersListByPoE", ReplyAction="http://tempuri.org/Common/GetUsersListByPoEResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetUsersListByPoEAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetImportanceAnswer", ReplyAction="http://tempuri.org/Common/GetImportanceAnswerResponse")]
        bExcellent.Service.Util.Response.QuestionScore[] GetImportanceAnswer(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetImportanceAnswer", ReplyAction="http://tempuri.org/Common/GetImportanceAnswerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.QuestionScore[]> GetImportanceAnswerAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDemographicAnswer", ReplyAction="http://tempuri.org/Common/GetDemographicAnswerResponse")]
        bExcellent.Service.Util.Response.QuestionScore[] GetDemographicAnswer(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetDemographicAnswer", ReplyAction="http://tempuri.org/Common/GetDemographicAnswerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.QuestionScore[]> GetDemographicAnswerAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSurveyUsersListByPoE", ReplyAction="http://tempuri.org/Common/GetSurveyUsersListByPoEResponse")]
        bExcellent.Service.Util.Domain.User[] GetSurveyUsersListByPoE(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetSurveyUsersListByPoE", ReplyAction="http://tempuri.org/Common/GetSurveyUsersListByPoEResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetSurveyUsersListByPoEAsync(int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetProductSurveyAnswer", ReplyAction="http://tempuri.org/Common/GetProductSurveyAnswerResponse")]
        bExcellent.Service.Util.Response.QuestionScore[] GetProductSurveyAnswer(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetProductSurveyAnswer", ReplyAction="http://tempuri.org/Common/GetProductSurveyAnswerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.QuestionScore[]> GetProductSurveyAnswerAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserFBStatus", ReplyAction="http://tempuri.org/Common/GetUserFBStatusResponse")]
        int GetUserFBStatus(int userid, int poeid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserFBStatus", ReplyAction="http://tempuri.org/Common/GetUserFBStatusResponse")]
        System.Threading.Tasks.Task<int> GetUserFBStatusAsync(int userid, int poeid, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserNotificationsLatest", ReplyAction="http://tempuri.org/Common/GetUserNotificationsLatestResponse")]
        bExcellent.Service.Util.Response.Notification GetUserNotificationsLatest(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserNotificationsLatest", ReplyAction="http://tempuri.org/Common/GetUserNotificationsLatestResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Notification> GetUserNotificationsLatestAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateManagerSync", ReplyAction="http://tempuri.org/Common/UpdateManagerSyncResponse")]
        void UpdateManagerSync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateManagerSync", ReplyAction="http://tempuri.org/Common/UpdateManagerSyncResponse")]
        System.Threading.Tasks.Task UpdateManagerSyncAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateDevlopmentPriorities", ReplyAction="http://tempuri.org/Common/UpdateDevlopmentPrioritiesResponse")]
        void UpdateDevlopmentPriorities(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdateDevlopmentPriorities", ReplyAction="http://tempuri.org/Common/UpdateDevlopmentPrioritiesResponse")]
        System.Threading.Tasks.Task UpdateDevlopmentPrioritiesAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRolesByProfileUpdated", ReplyAction="http://tempuri.org/Common/GetUserRolesByProfileUpdatedResponse")]
        bExcellent.Service.Util.Domain.UserRole[] GetUserRolesByProfileUpdated(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetUserRolesByProfileUpdated", ReplyAction="http://tempuri.org/Common/GetUserRolesByProfileUpdatedResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserRolesByProfileUpdatedAsync(int userid, int poeid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteIncompleteFB", ReplyAction="http://tempuri.org/Common/DeleteIncompleteFBResponse")]
        void DeleteIncompleteFB(string feedbackId, int mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeleteIncompleteFB", ReplyAction="http://tempuri.org/Common/DeleteIncompleteFBResponse")]
        System.Threading.Tasks.Task DeleteIncompleteFBAsync(string feedbackId, int mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartners", ReplyAction="http://tempuri.org/Common/GetPartnersResponse")]
        bExcellent.Service.Util.Response.Partner[] GetPartners(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartners", ReplyAction="http://tempuri.org/Common/GetPartnersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetPartnersAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/InsertSurveyAnswer", ReplyAction="http://tempuri.org/Common/InsertSurveyAnswerResponse")]
        void InsertSurveyAnswer(int questionId, int answerValue, string answer, int feedbackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/InsertSurveyAnswer", ReplyAction="http://tempuri.org/Common/InsertSurveyAnswerResponse")]
        System.Threading.Tasks.Task InsertSurveyAnswerAsync(int questionId, int answerValue, string answer, int feedbackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateSurvey", ReplyAction="http://tempuri.org/Common/CreateSurveyResponse")]
        int CreateSurvey(int userid, int poeid, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreateSurvey", ReplyAction="http://tempuri.org/Common/CreateSurveyResponse")]
        System.Threading.Tasks.Task<int> CreateSurveyAsync(int userid, int poeid, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CompleteSurvey", ReplyAction="http://tempuri.org/Common/CompleteSurveyResponse")]
        void CompleteSurvey(int feedbackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CompleteSurvey", ReplyAction="http://tempuri.org/Common/CompleteSurveyResponse")]
        System.Threading.Tasks.Task CompleteSurveyAsync(int feedbackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetCompletedAnswers", ReplyAction="http://tempuri.org/Common/GetCompletedAnswersResponse")]
        bExcellent.Service.Util.Response.PSESurvey GetCompletedAnswers(int feedbackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetCompletedAnswers", ReplyAction="http://tempuri.org/Common/GetCompletedAnswersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.PSESurvey> GetCompletedAnswersAsync(int feedbackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreatePartner", ReplyAction="http://tempuri.org/Common/CreatePartnerResponse")]
        void CreatePartner(int userid, string partnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/CreatePartner", ReplyAction="http://tempuri.org/Common/CreatePartnerResponse")]
        System.Threading.Tasks.Task CreatePartnerAsync(int userid, string partnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/IsPartnerExist", ReplyAction="http://tempuri.org/Common/IsPartnerExistResponse")]
        bool IsPartnerExist(int userId, string partnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/IsPartnerExist", ReplyAction="http://tempuri.org/Common/IsPartnerExistResponse")]
        System.Threading.Tasks.Task<bool> IsPartnerExistAsync(int userId, string partnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartnerResults", ReplyAction="http://tempuri.org/Common/GetPartnerResultsResponse")]
        bExcellent.Service.Util.Request.PPAResults[] GetPartnerResults(int userId, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetPartnerResults", ReplyAction="http://tempuri.org/Common/GetPartnerResultsResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Request.PPAResults[]> GetPartnerResultsAsync(int userId, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdatePartner", ReplyAction="http://tempuri.org/Common/UpdatePartnerResponse")]
        void UpdatePartner(int userId, int partnerId, string partnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UpdatePartner", ReplyAction="http://tempuri.org/Common/UpdatePartnerResponse")]
        System.Threading.Tasks.Task UpdatePartnerAsync(int userId, int partnerId, string partnerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeletePartner", ReplyAction="http://tempuri.org/Common/DeletePartnerResponse")]
        void DeletePartner(int userId, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeletePartner", ReplyAction="http://tempuri.org/Common/DeletePartnerResponse")]
        System.Threading.Tasks.Task DeletePartnerAsync(int userId, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UploadPlan", ReplyAction="http://tempuri.org/Common/UploadPlanResponse")]
        void UploadPlan(int userId, int partnerId, int poeid, string filnename, string extension, string realFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/UploadPlan", ReplyAction="http://tempuri.org/Common/UploadPlanResponse")]
        System.Threading.Tasks.Task UploadPlanAsync(int userId, int partnerId, int poeid, string filnename, string extension, string realFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeletePlan", ReplyAction="http://tempuri.org/Common/DeletePlanResponse")]
        void DeletePlan(int userid, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/DeletePlan", ReplyAction="http://tempuri.org/Common/DeletePlanResponse")]
        System.Threading.Tasks.Task DeletePlanAsync(int userid, int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadUserRolesbyPartner", ReplyAction="http://tempuri.org/Common/LoadUserRolesbyPartnerResponse")]
        bExcellent.Service.Util.Domain.User[] LoadUserRolesbyPartner(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadUserRolesbyPartner", ReplyAction="http://tempuri.org/Common/LoadUserRolesbyPartnerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadUserRolesbyPartnerAsync(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/ListDesigantion", ReplyAction="http://tempuri.org/Common/ListDesigantionResponse")]
        bExcellent.Service.Util.Domain.Designation[] ListDesigantion(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/ListDesigantion", ReplyAction="http://tempuri.org/Common/ListDesigantionResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Designation[]> ListDesigantionAsync(int userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadTZUserRolesbyPartner", ReplyAction="http://tempuri.org/Common/LoadTZUserRolesbyPartnerResponse")]
        bExcellent.Service.Util.Domain.User[] LoadTZUserRolesbyPartner(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadTZUserRolesbyPartner", ReplyAction="http://tempuri.org/Common/LoadTZUserRolesbyPartnerResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadTZUserRolesbyPartnerAsync(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartners", ReplyAction="http://tempuri.org/Common/GetOverallPartnersResponse")]
        bExcellent.Service.Util.Response.Partner[] GetOverallPartners(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/GetOverallPartners", ReplyAction="http://tempuri.org/Common/GetOverallPartnersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersAsync(int userid, int designationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadFilterPartners", ReplyAction="http://tempuri.org/Common/LoadFilterPartnersResponse")]
        bExcellent.Service.Util.Domain.User[] LoadFilterPartners(int userid, int designationId, int currentUserid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Common/LoadFilterPartners", ReplyAction="http://tempuri.org/Common/LoadFilterPartnersResponse")]
        System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadFilterPartnersAsync(int userid, int designationId, int currentUserid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CommonChannel : CheckSite.Common.Common, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommonClient : System.ServiceModel.ClientBase<CheckSite.Common.Common>, CheckSite.Common.Common {
        
        public CommonClient() {
        }
        
        public CommonClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommonClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommonClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bExcellent.Service.Util.Domain.Zone[] LoadAreaOfPartner(int userid, int designationId) {
            return base.Channel.LoadAreaOfPartner(userid, designationId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Zone[]> LoadAreaOfPartnerAsync(int userid, int designationId) {
            return base.Channel.LoadAreaOfPartnerAsync(userid, designationId);
        }
        
        public bExcellent.Service.Util.Domain.TimeZone[] LoadTimeZoneOfPartner(int userid, int designationId) {
            return base.Channel.LoadTimeZoneOfPartner(userid, designationId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.TimeZone[]> LoadTimeZoneOfPartnerAsync(int userid, int designationId) {
            return base.Channel.LoadTimeZoneOfPartnerAsync(userid, designationId);
        }
        
        public bExcellent.Service.Util.Domain.Country[] LoadCountryOfPartner(int userid, int designationId) {
            return base.Channel.LoadCountryOfPartner(userid, designationId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Country[]> LoadCountryOfPartnerAsync(int userid, int designationId) {
            return base.Channel.LoadCountryOfPartnerAsync(userid, designationId);
        }
        
        public bExcellent.Service.Util.Domain.Country[] LoadCountryByAreaId(int areaId) {
            return base.Channel.LoadCountryByAreaId(areaId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Country[]> LoadCountryByAreaIdAsync(int areaId) {
            return base.Channel.LoadCountryByAreaIdAsync(areaId);
        }
        
        public bExcellent.Service.Util.Domain.Zone[] LoadAreaByZoneId(int zoneId) {
            return base.Channel.LoadAreaByZoneId(zoneId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Zone[]> LoadAreaByZoneIdAsync(int zoneId) {
            return base.Channel.LoadAreaByZoneIdAsync(zoneId);
        }
        
        public bExcellent.Service.Util.Domain.User[] LoadPartnersByAreaId(int userid, int designationId, int areaId) {
            return base.Channel.LoadPartnersByAreaId(userid, designationId, areaId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadPartnersByAreaIdAsync(int userid, int designationId, int areaId) {
            return base.Channel.LoadPartnersByAreaIdAsync(userid, designationId, areaId);
        }
        
        public bExcellent.Service.Util.Domain.User[] LoadPartnersByCountryId(int userid, int designationId, int countryId, int areaId) {
            return base.Channel.LoadPartnersByCountryId(userid, designationId, countryId, areaId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadPartnersByCountryIdAsync(int userid, int designationId, int countryId, int areaId) {
            return base.Channel.LoadPartnersByCountryIdAsync(userid, designationId, countryId, areaId);
        }
        
        public bExcellent.Service.Util.Domain.User[] LoadPartnersByZoneId(int userid, int designationId, int zoneId) {
            return base.Channel.LoadPartnersByZoneId(userid, designationId, zoneId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadPartnersByZoneIdAsync(int userid, int designationId, int zoneId) {
            return base.Channel.LoadPartnersByZoneIdAsync(userid, designationId, zoneId);
        }
        
        public bExcellent.Service.Util.Response.Partner[] GetOverallPartnersByZone(int userid, int designationId, int areaId) {
            return base.Channel.GetOverallPartnersByZone(userid, designationId, areaId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersByZoneAsync(int userid, int designationId, int areaId) {
            return base.Channel.GetOverallPartnersByZoneAsync(userid, designationId, areaId);
        }
        
        public bExcellent.Service.Util.Response.Partner[] GetOverallPartnersByArea(int userid, int designationId, int areaId) {
            return base.Channel.GetOverallPartnersByArea(userid, designationId, areaId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersByAreaAsync(int userid, int designationId, int areaId) {
            return base.Channel.GetOverallPartnersByAreaAsync(userid, designationId, areaId);
        }
        
        public bExcellent.Service.Util.Response.Partner[] GetOverallPartnersByCountry(int userid, int designationId, int countryId) {
            return base.Channel.GetOverallPartnersByCountry(userid, designationId, countryId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersByCountryAsync(int userid, int designationId, int countryId) {
            return base.Channel.GetOverallPartnersByCountryAsync(userid, designationId, countryId);
        }
        
        public string GetPartnerName(string mplId) {
            return base.Channel.GetPartnerName(mplId);
        }
        
        public System.Threading.Tasks.Task<string> GetPartnerNameAsync(string mplId) {
            return base.Channel.GetPartnerNameAsync(mplId);
        }
        
        public int GetPSEUserId(string emailid) {
            return base.Channel.GetPSEUserId(emailid);
        }
        
        public System.Threading.Tasks.Task<int> GetPSEUserIdAsync(string emailid) {
            return base.Channel.GetPSEUserIdAsync(emailid);
        }
        
        public int GetPartnerId(string mplId) {
            return base.Channel.GetPartnerId(mplId);
        }
        
        public System.Threading.Tasks.Task<int> GetPartnerIdAsync(string mplId) {
            return base.Channel.GetPartnerIdAsync(mplId);
        }
        
        public void InsertPartnerMapping(int userId, int partnerId) {
            base.Channel.InsertPartnerMapping(userId, partnerId);
        }
        
        public System.Threading.Tasks.Task InsertPartnerMappingAsync(int userId, int partnerId) {
            return base.Channel.InsertPartnerMappingAsync(userId, partnerId);
        }
        
        public bExcellent.Service.Util.Response.PSEReports GetPSEReports(int userId) {
            return base.Channel.GetPSEReports(userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.PSEReports> GetPSEReportsAsync(int userId) {
            return base.Channel.GetPSEReportsAsync(userId);
        }
        
        public bExcellent.Service.Util.Response.PSMReports[] GetPSMReports(int userId) {
            return base.Channel.GetPSMReports(userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.PSMReports[]> GetPSMReportsAsync(int userId) {
            return base.Channel.GetPSMReportsAsync(userId);
        }
        
        public bExcellent.Service.Util.Response.TopLeadsReport GetAreaReports(int userId) {
            return base.Channel.GetAreaReports(userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.TopLeadsReport> GetAreaReportsAsync(int userId) {
            return base.Channel.GetAreaReportsAsync(userId);
        }
        
        public bExcellent.Service.Util.Response.TopLeadsReport GetTimeZoneReports(int userId) {
            return base.Channel.GetTimeZoneReports(userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.TopLeadsReport> GetTimeZoneReportsAsync(int userId) {
            return base.Channel.GetTimeZoneReportsAsync(userId);
        }
        
        public bExcellent.Service.Util.Domain.MinimizedPOE[] GetPoEsByUserId(int userId) {
            return base.Channel.GetPoEsByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetPoEsByUserIdAsync(int userId) {
            return base.Channel.GetPoEsByUserIdAsync(userId);
        }
        
        public bExcellent.Service.Util.Domain.MinimizedPOE[] GetMySubscribedPoes(int subId) {
            return base.Channel.GetMySubscribedPoes(subId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetMySubscribedPoesAsync(int subId) {
            return base.Channel.GetMySubscribedPoesAsync(subId);
        }
        
        public bExcellent.Service.Util.Domain.MinimizedPOE[] GetMySubscribedPoeList(int userid, int subId) {
            return base.Channel.GetMySubscribedPoeList(userid, subId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetMySubscribedPoeListAsync(int userid, int subId) {
            return base.Channel.GetMySubscribedPoeListAsync(userid, subId);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetUserMappingDetails(int userId, int subscriptionid) {
            return base.Channel.GetUserMappingDetails(userId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetUserMappingDetailsAsync(int userId, int subscriptionid) {
            return base.Channel.GetUserMappingDetailsAsync(userId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.Accounts[] GetAccountDetail(int subscriptionid) {
            return base.Channel.GetAccountDetail(subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Accounts[]> GetAccountDetailAsync(int subscriptionid) {
            return base.Channel.GetAccountDetailAsync(subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.PoeModules GetPoeContent(int poeid) {
            return base.Channel.GetPoeContent(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.PoeModules> GetPoeContentAsync(int poeid) {
            return base.Channel.GetPoeContentAsync(poeid);
        }
        
        public int GetUserRole(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetUserRole(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<int> GetUserRoleAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetUserRoleAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyTeammembers(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyTeammembers(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyTeammembersAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyTeammembersAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyGiveFbTeam(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyGiveFbTeam(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyGiveFbTeamAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyGiveFbTeamAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyGiveFbTeamList(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyGiveFbTeamList(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyGiveFbTeamListAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyGiveFbTeamListAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyReceiveFbTeam(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyReceiveFbTeam(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyReceiveFbTeamAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyReceiveFbTeamAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyManagersFeedback(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyManagersFeedback(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyManagersFeedbackAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyManagersFeedbackAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyReceiveFbTeamList(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyReceiveFbTeamList(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyReceiveFbTeamListAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyReceiveFbTeamListAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyManager(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyManager(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyManagerAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyManagerAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyCustomers(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyCustomers(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyCustomersAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyCustomersAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyPeers(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyPeers(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyPeersAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyPeersAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyFullNetwork(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyFullNetwork(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyFullNetworkAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyFullNetworkAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetNetworksUsersWall(int userId, int POEId, int subscriptionid) {
            return base.Channel.GetNetworksUsersWall(userId, POEId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetNetworksUsersWallAsync(int userId, int POEId, int subscriptionid) {
            return base.Channel.GetNetworksUsersWallAsync(userId, POEId, subscriptionid);
        }
        
        public int GetMyNetworkCount(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyNetworkCount(userId, poeId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<int> GetMyNetworkCountAsync(int userId, int poeId, int subscriptionid) {
            return base.Channel.GetMyNetworkCountAsync(userId, poeId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.User GetUserDetailsByEmailId(string emailId) {
            return base.Channel.GetUserDetailsByEmailId(emailId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User> GetUserDetailsByEmailIdAsync(string emailId) {
            return base.Channel.GetUserDetailsByEmailIdAsync(emailId);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping GetMyDetail(int userid, int poeid, int subscriptionid) {
            return base.Channel.GetMyDetail(userid, poeid, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetMyDetailAsync(int userid, int poeid, int subscriptionid) {
            return base.Channel.GetMyDetailAsync(userid, poeid, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping GetMyDetailWithArea(int userid, int poeid, int subscriptionid) {
            return base.Channel.GetMyDetailWithArea(userid, poeid, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetMyDetailWithAreaAsync(int userid, int poeid, int subscriptionid) {
            return base.Channel.GetMyDetailWithAreaAsync(userid, poeid, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.Country[] GetAllCounties() {
            return base.Channel.GetAllCounties();
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Country[]> GetAllCountiesAsync() {
            return base.Channel.GetAllCountiesAsync();
        }
        
        public bExcellent.Service.Util.Domain.Zone[] GetAllArea() {
            return base.Channel.GetAllArea();
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Zone[]> GetAllAreaAsync() {
            return base.Channel.GetAllAreaAsync();
        }
        
        public bExcellent.Service.Util.Domain.User GetUserPhoto(int userId) {
            return base.Channel.GetUserPhoto(userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User> GetUserPhotoAsync(int userId) {
            return base.Channel.GetUserPhotoAsync(userId);
        }
        
        public bool UpdateUserPhoto(int userId, byte[] photo) {
            return base.Channel.UpdateUserPhoto(userId, photo);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserPhotoAsync(int userId, byte[] photo) {
            return base.Channel.UpdateUserPhotoAsync(userId, photo);
        }
        
        public bool UpdateUserDetails(string firstName, string lastName, string companyName, string jobTitle, int countryId, int userId, int areaId) {
            return base.Channel.UpdateUserDetails(firstName, lastName, companyName, jobTitle, countryId, userId, areaId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserDetailsAsync(string firstName, string lastName, string companyName, string jobTitle, int countryId, int userId, int areaId) {
            return base.Channel.UpdateUserDetailsAsync(firstName, lastName, companyName, jobTitle, countryId, userId, areaId);
        }
        
        public bool UpdatePassword(string userName, string password) {
            return base.Channel.UpdatePassword(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePasswordAsync(string userName, string password) {
            return base.Channel.UpdatePasswordAsync(userName, password);
        }
        
        public bool GetPassword(string emailAddress) {
            return base.Channel.GetPassword(emailAddress);
        }
        
        public System.Threading.Tasks.Task<bool> GetPasswordAsync(string emailAddress) {
            return base.Channel.GetPasswordAsync(emailAddress);
        }
        
        public bool CheckEmailId(string EmailId) {
            return base.Channel.CheckEmailId(EmailId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailIdAsync(string EmailId) {
            return base.Channel.CheckEmailIdAsync(EmailId);
        }
        
        public void UpdatePageMode(int userid, int status) {
            base.Channel.UpdatePageMode(userid, status);
        }
        
        public System.Threading.Tasks.Task UpdatePageModeAsync(int userid, int status) {
            return base.Channel.UpdatePageModeAsync(userid, status);
        }
        
        public string GetPoeName(int poeId) {
            return base.Channel.GetPoeName(poeId);
        }
        
        public System.Threading.Tasks.Task<string> GetPoeNameAsync(int poeId) {
            return base.Channel.GetPoeNameAsync(poeId);
        }
        
        public string GetPasswordForUSer(string emailid) {
            return base.Channel.GetPasswordForUSer(emailid);
        }
        
        public System.Threading.Tasks.Task<string> GetPasswordForUSerAsync(string emailid) {
            return base.Channel.GetPasswordForUSerAsync(emailid);
        }
        
        public int CheckMapping(int userId, int subscriptionid) {
            return base.Channel.CheckMapping(userId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<int> CheckMappingAsync(int userId, int subscriptionid) {
            return base.Channel.CheckMappingAsync(userId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.Network[] GetUserSubscriptions(string emailId) {
            return base.Channel.GetUserSubscriptions(emailId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network[]> GetUserSubscriptionsAsync(string emailId) {
            return base.Channel.GetUserSubscriptionsAsync(emailId);
        }
        
        public bExcellent.Service.Util.Domain.Network[] GetMySubscription(string emailId) {
            return base.Channel.GetMySubscription(emailId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network[]> GetMySubscriptionAsync(string emailId) {
            return base.Channel.GetMySubscriptionAsync(emailId);
        }
        
        public bExcellent.Service.DataAccess.V3_GetMyActivitiesResult[] GetMyActivities(int userId, int subscriptionId, int sourceId) {
            return base.Channel.GetMyActivities(userId, subscriptionId, sourceId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.DataAccess.V3_GetMyActivitiesResult[]> GetMyActivitiesAsync(int userId, int subscriptionId, int sourceId) {
            return base.Channel.GetMyActivitiesAsync(userId, subscriptionId, sourceId);
        }
        
        public bExcellent.Service.DataAccess.V3_GetUserListByBatchIdResult[] GetUserList(string batchid, int userId) {
            return base.Channel.GetUserList(batchid, userId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.DataAccess.V3_GetUserListByBatchIdResult[]> GetUserListAsync(string batchid, int userId) {
            return base.Channel.GetUserListAsync(batchid, userId);
        }
        
        public bExcellent.Service.Util.Domain.Network GetDefaultUserSubscription(string emailId) {
            return base.Channel.GetDefaultUserSubscription(emailId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network> GetDefaultUserSubscriptionAsync(string emailId) {
            return base.Channel.GetDefaultUserSubscriptionAsync(emailId);
        }
        
        public bExcellent.Service.Util.Domain.Network GetOwnNetwork(string emailId) {
            return base.Channel.GetOwnNetwork(emailId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Network> GetOwnNetworkAsync(string emailId) {
            return base.Channel.GetOwnNetworkAsync(emailId);
        }
        
        public bool DeleteUser(int userid, int poeid, int subscriptionid, int level, int deleteId, int deletepeer) {
            return base.Channel.DeleteUser(userid, poeid, subscriptionid, level, deleteId, deletepeer);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int userid, int poeid, int subscriptionid, int level, int deleteId, int deletepeer) {
            return base.Channel.DeleteUserAsync(userid, poeid, subscriptionid, level, deleteId, deletepeer);
        }
        
        public bool CreateActivity(int userid, string toids, int subid, int sourceid, string activity) {
            return base.Channel.CreateActivity(userid, toids, subid, sourceid, activity);
        }
        
        public System.Threading.Tasks.Task<bool> CreateActivityAsync(int userid, string toids, int subid, int sourceid, string activity) {
            return base.Channel.CreateActivityAsync(userid, toids, subid, sourceid, activity);
        }
        
        public bool CreateActivityForPathfinders(int userid, string toids, int subid, int sourceid, string activity, int poeId, int moduleId) {
            return base.Channel.CreateActivityForPathfinders(userid, toids, subid, sourceid, activity, poeId, moduleId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateActivityForPathfindersAsync(int userid, string toids, int subid, int sourceid, string activity, int poeId, int moduleId) {
            return base.Channel.CreateActivityForPathfindersAsync(userid, toids, subid, sourceid, activity, poeId, moduleId);
        }
        
        public bool SendConnectMail(int userid, string toids, int poeId) {
            return base.Channel.SendConnectMail(userid, toids, poeId);
        }
        
        public System.Threading.Tasks.Task<bool> SendConnectMailAsync(int userid, string toids, int poeId) {
            return base.Channel.SendConnectMailAsync(userid, toids, poeId);
        }
        
        public bool SendMailFromWall(int type, string fromname, string toIds, bool hasAttachment) {
            return base.Channel.SendMailFromWall(type, fromname, toIds, hasAttachment);
        }
        
        public System.Threading.Tasks.Task<bool> SendMailFromWallAsync(int type, string fromname, string toIds, bool hasAttachment) {
            return base.Channel.SendMailFromWallAsync(type, fromname, toIds, hasAttachment);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyUsers(int userId, int subscriptionid) {
            return base.Channel.GetMyUsers(userId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyUsersAsync(int userId, int subscriptionid) {
            return base.Channel.GetMyUsersAsync(userId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetMyAllUsers(int userId, int subscriptionid) {
            return base.Channel.GetMyAllUsers(userId, subscriptionid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetMyAllUsersAsync(int userId, int subscriptionid) {
            return base.Channel.GetMyAllUsersAsync(userId, subscriptionid);
        }
        
        public bExcellent.Service.Util.Response.Standing GetStanding(int poeid, int userid, int tileclicked, int subid, string domain) {
            return base.Channel.GetStanding(poeid, userid, tileclicked, subid, domain);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Standing> GetStandingAsync(int poeid, int userid, int tileclicked, int subid, string domain) {
            return base.Channel.GetStandingAsync(poeid, userid, tileclicked, subid, domain);
        }
        
        public bExcellent.Service.Util.Response.Standing GetStandingTileScore(int poeid, int userid, int subid, string domain) {
            return base.Channel.GetStandingTileScore(poeid, userid, subid, domain);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Standing> GetStandingTileScoreAsync(int poeid, int userid, int subid, string domain) {
            return base.Channel.GetStandingTileScoreAsync(poeid, userid, subid, domain);
        }
        
        public bExcellent.Service.DataAccess.V3_GetStandingAvgWCSIScoreResult[] GetAvgWcsiScore(string fbid) {
            return base.Channel.GetAvgWcsiScore(fbid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.DataAccess.V3_GetStandingAvgWCSIScoreResult[]> GetAvgWcsiScoreAsync(string fbid) {
            return base.Channel.GetAvgWcsiScoreAsync(fbid);
        }
        
        public bExcellent.Service.Util.Domain.UserRole[] GetUserRoles(int userid, int subid) {
            return base.Channel.GetUserRoles(userid, subid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserRolesAsync(int userid, int subid) {
            return base.Channel.GetUserRolesAsync(userid, subid);
        }
        
        public bExcellent.Service.Util.Domain.POE[] GetUserPoeByRole(int userid, int subid, int role) {
            return base.Channel.GetUserPoeByRole(userid, subid, role);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeByRoleAsync(int userid, int subid, int role) {
            return base.Channel.GetUserPoeByRoleAsync(userid, subid, role);
        }
        
        public bExcellent.Service.Util.Domain.POE[] GetUserPoeByType(int userid, int subid, int type) {
            return base.Channel.GetUserPoeByType(userid, subid, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeByTypeAsync(int userid, int subid, int type) {
            return base.Channel.GetUserPoeByTypeAsync(userid, subid, type);
        }
        
        public bool SaveGoal(bExcellent.Service.Util.Domain.GoalShare goals) {
            return base.Channel.SaveGoal(goals);
        }
        
        public System.Threading.Tasks.Task<bool> SaveGoalAsync(bExcellent.Service.Util.Domain.GoalShare goals) {
            return base.Channel.SaveGoalAsync(goals);
        }
        
        public bool SaveGoals(bExcellent.Service.Util.Domain.GoalShare[] goalShares) {
            return base.Channel.SaveGoals(goalShares);
        }
        
        public System.Threading.Tasks.Task<bool> SaveGoalsAsync(bExcellent.Service.Util.Domain.GoalShare[] goalShares) {
            return base.Channel.SaveGoalsAsync(goalShares);
        }
        
        public bool AssignPoe(bExcellent.Service.Util.Domain.AssignPoe[] assignpoe1) {
            return base.Channel.AssignPoe(assignpoe1);
        }
        
        public System.Threading.Tasks.Task<bool> AssignPoeAsync(bExcellent.Service.Util.Domain.AssignPoe[] assignpoe) {
            return base.Channel.AssignPoeAsync(assignpoe);
        }
        
        public bExcellent.Service.Util.Domain.ModulesGoal[] GetMyGoals(int poeId, int userid) {
            return base.Channel.GetMyGoals(poeId, userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.ModulesGoal[]> GetMyGoalsAsync(int poeId, int userid) {
            return base.Channel.GetMyGoalsAsync(poeId, userid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping GetUserdetailsByMappingId(int mappingid) {
            return base.Channel.GetUserdetailsByMappingId(mappingid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetUserdetailsByMappingIdAsync(int mappingid) {
            return base.Channel.GetUserdetailsByMappingIdAsync(mappingid);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping GetUserDetailsByFbId(int fbId) {
            return base.Channel.GetUserDetailsByFbId(fbId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping> GetUserDetailsByFbIdAsync(int fbId) {
            return base.Channel.GetUserDetailsByFbIdAsync(fbId);
        }
        
        public bExcellent.Service.Util.Response.CreatedFeedback[] GetFeedbacksByGroupId(string groupid) {
            return base.Channel.GetFeedbacksByGroupId(groupid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.CreatedFeedback[]> GetFeedbacksByGroupIdAsync(string groupid) {
            return base.Channel.GetFeedbacksByGroupIdAsync(groupid);
        }
        
        public bExcellent.Service.Util.Domain.User[] GetSubscribedUserWall(int userid, int subId) {
            return base.Channel.GetSubscribedUserWall(userid, subId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetSubscribedUserWallAsync(int userid, int subId) {
            return base.Channel.GetSubscribedUserWallAsync(userid, subId);
        }
        
        public bExcellent.Service.Util.Response.SyncScoreCollection GetSyncScores(int userid, int poeid, int subid, int usermapping, int type) {
            return base.Channel.GetSyncScores(userid, poeid, subid, usermapping, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncScoresAsync(int userid, int poeid, int subid, int usermapping, int type) {
            return base.Channel.GetSyncScoresAsync(userid, poeid, subid, usermapping, type);
        }
        
        public bExcellent.Service.Util.Response.SyncScoreCollection GetSyncScoresOverall(int userid, int poeid, int subid, int usermapping, int type) {
            return base.Channel.GetSyncScoresOverall(userid, poeid, subid, usermapping, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncScoresOverallAsync(int userid, int poeid, int subid, int usermapping, int type) {
            return base.Channel.GetSyncScoresOverallAsync(userid, poeid, subid, usermapping, type);
        }
        
        public bExcellent.Service.Util.Response.SyncScoreCollection GetAvgSyncScores(int userid, int poeid, int subid, int type) {
            return base.Channel.GetAvgSyncScores(userid, poeid, subid, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetAvgSyncScoresAsync(int userid, int poeid, int subid, int type) {
            return base.Channel.GetAvgSyncScoresAsync(userid, poeid, subid, type);
        }
        
        public bExcellent.Service.Util.Response.SyncScoreCollection GetSyncScoresByFbId(int userid, int poeid, int subid, int usermapping, int type, int fbid) {
            return base.Channel.GetSyncScoresByFbId(userid, poeid, subid, usermapping, type, fbid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncScoresByFbIdAsync(int userid, int poeid, int subid, int usermapping, int type, int fbid) {
            return base.Channel.GetSyncScoresByFbIdAsync(userid, poeid, subid, usermapping, type, fbid);
        }
        
        public bExcellent.Service.Util.Response.SyncScoreCollection GetSyncTeamScore(int userid, int poeid, int subid, int type, string groupid, int mappingid) {
            return base.Channel.GetSyncTeamScore(userid, poeid, subid, type, groupid, mappingid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetSyncTeamScoreAsync(int userid, int poeid, int subid, int type, string groupid, int mappingid) {
            return base.Channel.GetSyncTeamScoreAsync(userid, poeid, subid, type, groupid, mappingid);
        }
        
        public bExcellent.Service.Util.Response.SyncScoreCollection GetAvgSyncScoresByFbId(int userid, int poeid, int subid, int type, string fbids) {
            return base.Channel.GetAvgSyncScoresByFbId(userid, poeid, subid, type, fbids);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncScoreCollection> GetAvgSyncScoresByFbIdAsync(int userid, int poeid, int subid, int type, string fbids) {
            return base.Channel.GetAvgSyncScoresByFbIdAsync(userid, poeid, subid, type, fbids);
        }
        
        public bExcellent.Service.Util.Response.SyncWcsiDiff GetSyncWcsiDiff(int userid, int poeid, int subid) {
            return base.Channel.GetSyncWcsiDiff(userid, poeid, subid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.SyncWcsiDiff> GetSyncWcsiDiffAsync(int userid, int poeid, int subid) {
            return base.Channel.GetSyncWcsiDiffAsync(userid, poeid, subid);
        }
        
        public bExcellent.Service.Util.Domain.Plan GetPlanById(int planId) {
            return base.Channel.GetPlanById(planId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Plan> GetPlanByIdAsync(int planId) {
            return base.Channel.GetPlanByIdAsync(planId);
        }
        
        public void SendPoePdfNotification(string emailContents, string subject) {
            base.Channel.SendPoePdfNotification(emailContents, subject);
        }
        
        public System.Threading.Tasks.Task SendPoePdfNotificationAsync(string emailContents, string subject) {
            return base.Channel.SendPoePdfNotificationAsync(emailContents, subject);
        }
        
        public void SendContactMails(string emailContents, string subject) {
            base.Channel.SendContactMails(emailContents, subject);
        }
        
        public System.Threading.Tasks.Task SendContactMailsAsync(string emailContents, string subject) {
            return base.Channel.SendContactMailsAsync(emailContents, subject);
        }
        
        public bExcellent.Service.Util.Domain.ManagerReports[] GenerateManagerReport(int poeid) {
            return base.Channel.GenerateManagerReport(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.ManagerReports[]> GenerateManagerReportAsync(int poeid) {
            return base.Channel.GenerateManagerReportAsync(poeid);
        }
        
        public bExcellent.Service.Util.Domain.TeamReports[] GenerateTeamReport(int poeid) {
            return base.Channel.GenerateTeamReport(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.TeamReports[]> GenerateTeamReportAsync(int poeid) {
            return base.Channel.GenerateTeamReportAsync(poeid);
        }
        
        public void InsertYammerContent(string tomailid, string frmMailid, string imageurl, string subject, string groupid, string desc, string yammertoken) {
            base.Channel.InsertYammerContent(tomailid, frmMailid, imageurl, subject, groupid, desc, yammertoken);
        }
        
        public System.Threading.Tasks.Task InsertYammerContentAsync(string tomailid, string frmMailid, string imageurl, string subject, string groupid, string desc, string yammertoken) {
            return base.Channel.InsertYammerContentAsync(tomailid, frmMailid, imageurl, subject, groupid, desc, yammertoken);
        }
        
        public bExcellent.Service.Util.Domain.YammerContent[] GetYammerTopContent() {
            return base.Channel.GetYammerTopContent();
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.YammerContent[]> GetYammerTopContentAsync() {
            return base.Channel.GetYammerTopContentAsync();
        }
        
        public void UpdateYammercontent(int id) {
            base.Channel.UpdateYammercontent(id);
        }
        
        public System.Threading.Tasks.Task UpdateYammercontentAsync(int id) {
            return base.Channel.UpdateYammercontentAsync(id);
        }
        
        public int GetModuleCount(int poeid) {
            return base.Channel.GetModuleCount(poeid);
        }
        
        public System.Threading.Tasks.Task<int> GetModuleCountAsync(int poeid) {
            return base.Channel.GetModuleCountAsync(poeid);
        }
        
        public void DeleteExistingFeedback(int userid, int poeid) {
            base.Channel.DeleteExistingFeedback(userid, poeid);
        }
        
        public System.Threading.Tasks.Task DeleteExistingFeedbackAsync(int userid, int poeid) {
            return base.Channel.DeleteExistingFeedbackAsync(userid, poeid);
        }
        
        public bExcellent.Service.Util.Response.StandingNew GetStandingData(int poeid, int userid, int tileclicked, int subid, string domain) {
            return base.Channel.GetStandingData(poeid, userid, tileclicked, subid, domain);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.StandingNew> GetStandingDataAsync(int poeid, int userid, int tileclicked, int subid, string domain) {
            return base.Channel.GetStandingDataAsync(poeid, userid, tileclicked, subid, domain);
        }
        
        public bExcellent.Service.Util.Domain.UserPOEMapping[] GetTopMembers(int poeid, int userid, int type, string domain) {
            return base.Channel.GetTopMembers(poeid, userid, type, domain);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserPOEMapping[]> GetTopMembersAsync(int poeid, int userid, int type, string domain) {
            return base.Channel.GetTopMembersAsync(poeid, userid, type, domain);
        }
        
        public bExcellent.Service.Util.Response.StandingPAContent GetStandingPAContent(int userid, int poeid, int subid, string domain, bool cacheMode) {
            return base.Channel.GetStandingPAContent(userid, poeid, subid, domain, cacheMode);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.StandingPAContent> GetStandingPAContentAsync(int userid, int poeid, int subid, string domain, bool cacheMode) {
            return base.Channel.GetStandingPAContentAsync(userid, poeid, subid, domain, cacheMode);
        }
        
        public bExcellent.Service.Util.Response.DashBoard GetDashBoardDetails(int userid, int subid, int poeId, string domain) {
            return base.Channel.GetDashBoardDetails(userid, subid, poeId, domain);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.DashBoard> GetDashBoardDetailsAsync(int userid, int subid, int poeId, string domain) {
            return base.Channel.GetDashBoardDetailsAsync(userid, subid, poeId, domain);
        }
        
        public bExcellent.Service.Util.Domain.User[] GetNotUpdatedPasswordList(string poeid) {
            return base.Channel.GetNotUpdatedPasswordList(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetNotUpdatedPasswordListAsync(string poeid) {
            return base.Channel.GetNotUpdatedPasswordListAsync(poeid);
        }
        
        public void SendMailForResource(int fromid, string toIds, string resourceurl, string resourceTitle) {
            base.Channel.SendMailForResource(fromid, toIds, resourceurl, resourceTitle);
        }
        
        public System.Threading.Tasks.Task SendMailForResourceAsync(int fromid, string toIds, string resourceurl, string resourceTitle) {
            return base.Channel.SendMailForResourceAsync(fromid, toIds, resourceurl, resourceTitle);
        }
        
        public bExcellent.Service.Util.Domain.DashboardModel GetDashBoard(int userId, int poeId, int subid, string domain, int type) {
            return base.Channel.GetDashBoard(userId, poeId, subid, domain, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DashboardModel> GetDashBoardAsync(int userId, int poeId, int subid, string domain, int type) {
            return base.Channel.GetDashBoardAsync(userId, poeId, subid, domain, type);
        }
        
        public int GetIndividualUserSharedGoals(int userId, int poeId, int sharedId) {
            return base.Channel.GetIndividualUserSharedGoals(userId, poeId, sharedId);
        }
        
        public System.Threading.Tasks.Task<int> GetIndividualUserSharedGoalsAsync(int userId, int poeId, int sharedId) {
            return base.Channel.GetIndividualUserSharedGoalsAsync(userId, poeId, sharedId);
        }
        
        public bExcellent.Service.Util.Domain.DashboardPathFinders GetPathfinders(int userId, int poeId, int type) {
            return base.Channel.GetPathfinders(userId, poeId, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DashboardPathFinders> GetPathfindersAsync(int userId, int poeId, int type) {
            return base.Channel.GetPathfindersAsync(userId, poeId, type);
        }
        
        public double GetMyManagerScore(int userId, int poeid, int managerId) {
            return base.Channel.GetMyManagerScore(userId, poeid, managerId);
        }
        
        public System.Threading.Tasks.Task<double> GetMyManagerScoreAsync(int userId, int poeid, int managerId) {
            return base.Channel.GetMyManagerScoreAsync(userId, poeid, managerId);
        }
        
        public int GetRecognitionCount(int userid, int shredId, int type) {
            return base.Channel.GetRecognitionCount(userid, shredId, type);
        }
        
        public System.Threading.Tasks.Task<int> GetRecognitionCountAsync(int userid, int shredId, int type) {
            return base.Channel.GetRecognitionCountAsync(userid, shredId, type);
        }
        
        public int GetIndividualPathfindersCount(int userid, int poeId, int type, int moduleId, int pathfinderUserId) {
            return base.Channel.GetIndividualPathfindersCount(userid, poeId, type, moduleId, pathfinderUserId);
        }
        
        public System.Threading.Tasks.Task<int> GetIndividualPathfindersCountAsync(int userid, int poeId, int type, int moduleId, int pathfinderUserId) {
            return base.Channel.GetIndividualPathfindersCountAsync(userid, poeId, type, moduleId, pathfinderUserId);
        }
        
        public int GetFeedbackReceivedCount(int userId, int selectedUserid, int subid, int poeid) {
            return base.Channel.GetFeedbackReceivedCount(userId, selectedUserid, subid, poeid);
        }
        
        public System.Threading.Tasks.Task<int> GetFeedbackReceivedCountAsync(int userId, int selectedUserid, int subid, int poeid) {
            return base.Channel.GetFeedbackReceivedCountAsync(userId, selectedUserid, subid, poeid);
        }
        
        public int GetFeedbackGivenCount(int userId, int selectedUserid, int subid, int poeid) {
            return base.Channel.GetFeedbackGivenCount(userId, selectedUserid, subid, poeid);
        }
        
        public System.Threading.Tasks.Task<int> GetFeedbackGivenCountAsync(int userId, int selectedUserid, int subid, int poeid) {
            return base.Channel.GetFeedbackGivenCountAsync(userId, selectedUserid, subid, poeid);
        }
        
        public void CreateUpdateUserview(int userid, string section) {
            base.Channel.CreateUpdateUserview(userid, section);
        }
        
        public System.Threading.Tasks.Task CreateUpdateUserviewAsync(int userid, string section) {
            return base.Channel.CreateUpdateUserviewAsync(userid, section);
        }
        
        public bExcellent.Service.Util.Domain.Notification GetUserNotifications(int userId, int subscriptionId) {
            return base.Channel.GetUserNotifications(userId, subscriptionId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Notification> GetUserNotificationsAsync(int userId, int subscriptionId) {
            return base.Channel.GetUserNotificationsAsync(userId, subscriptionId);
        }
        
        public void ReportIssue(string path, string subject, string content, byte[] strdata, string from) {
            base.Channel.ReportIssue(path, subject, content, strdata, from);
        }
        
        public System.Threading.Tasks.Task ReportIssueAsync(string path, string subject, string content, byte[] strdata, string from) {
            return base.Channel.ReportIssueAsync(path, subject, content, strdata, from);
        }
        
        public bExcellent.Service.DataAccess.v4_GetMentorConnectHistoryResult[] GetConnectHistory(string fromId, string forId) {
            return base.Channel.GetConnectHistory(fromId, forId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.DataAccess.v4_GetMentorConnectHistoryResult[]> GetConnectHistoryAsync(string fromId, string forId) {
            return base.Channel.GetConnectHistoryAsync(fromId, forId);
        }
        
        public bExcellent.Service.Util.Domain.QuestionLists[] GetQuestionsList(int poeid) {
            return base.Channel.GetQuestionsList(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.QuestionLists[]> GetQuestionsListAsync(int poeid) {
            return base.Channel.GetQuestionsListAsync(poeid);
        }
        
        public string[] GetTrackTileScore(int poeid, int userid, int subid, string domain) {
            return base.Channel.GetTrackTileScore(poeid, userid, subid, domain);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTrackTileScoreAsync(int poeid, int userid, int subid, string domain) {
            return base.Channel.GetTrackTileScoreAsync(poeid, userid, subid, domain);
        }
        
        public bExcellent.Service.Util.Domain.TrackGoal TrackModuleQuestions(int UserId, int PoeId, int subid, string domain, int usermapping, int type) {
            return base.Channel.TrackModuleQuestions(UserId, PoeId, subid, domain, usermapping, type);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.TrackGoal> TrackModuleQuestionsAsync(int UserId, int PoeId, int subid, string domain, int usermapping, int type) {
            return base.Channel.TrackModuleQuestionsAsync(UserId, PoeId, subid, domain, usermapping, type);
        }
        
        public void DeleteGoalDate(int UserId, int PoeId, int QuestionId) {
            base.Channel.DeleteGoalDate(UserId, PoeId, QuestionId);
        }
        
        public System.Threading.Tasks.Task DeleteGoalDateAsync(int UserId, int PoeId, int QuestionId) {
            return base.Channel.DeleteGoalDateAsync(UserId, PoeId, QuestionId);
        }
        
        public bExcellent.Service.DataAccess.v4_GetGoalssharedbyuserResult[] GetGoalsShared(int userid, int foruserid, int PoeId, int subid, string domain) {
            return base.Channel.GetGoalsShared(userid, foruserid, PoeId, subid, domain);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.DataAccess.v4_GetGoalssharedbyuserResult[]> GetGoalsSharedAsync(int userid, int foruserid, int PoeId, int subid, string domain) {
            return base.Channel.GetGoalsSharedAsync(userid, foruserid, PoeId, subid, domain);
        }
        
        public bExcellent.Service.Util.Domain.POE[] GetUserPoeByRoleUpdated(int userid, int role) {
            return base.Channel.GetUserPoeByRoleUpdated(userid, role);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeByRoleUpdatedAsync(int userid, int role) {
            return base.Channel.GetUserPoeByRoleUpdatedAsync(userid, role);
        }
        
        public bExcellent.Service.Util.Domain.POE[] GetUserPoeManagerRole(int userid) {
            return base.Channel.GetUserPoeManagerRole(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeManagerRoleAsync(int userid) {
            return base.Channel.GetUserPoeManagerRoleAsync(userid);
        }
        
        public bExcellent.Service.Util.Domain.POE[] GetUserPoeTeamRole(int userid) {
            return base.Channel.GetUserPoeTeamRole(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.POE[]> GetUserPoeTeamRoleAsync(int userid) {
            return base.Channel.GetUserPoeTeamRoleAsync(userid);
        }
        
        public bExcellent.Service.Util.Domain.UserRole[] GetUserRolesByProfile(int userid, int poeid) {
            return base.Channel.GetUserRolesByProfile(userid, poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserRolesByProfileAsync(int userid, int poeid) {
            return base.Channel.GetUserRolesByProfileAsync(userid, poeid);
        }
        
        public bExcellent.Service.Util.Domain.UserRole[] GetUserCurrentRole(int userid) {
            return base.Channel.GetUserCurrentRole(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserCurrentRoleAsync(int userid) {
            return base.Channel.GetUserCurrentRoleAsync(userid);
        }
        
        public int GetManagerType(int userid, int poeid) {
            return base.Channel.GetManagerType(userid, poeid);
        }
        
        public System.Threading.Tasks.Task<int> GetManagerTypeAsync(int userid, int poeid) {
            return base.Channel.GetManagerTypeAsync(userid, poeid);
        }
        
        public bExcellent.Service.Util.Domain.DevelopmentPriorities[] GetManagerDevPriorities(int userId, int PoeId, int tmmappingId) {
            return base.Channel.GetManagerDevPriorities(userId, PoeId, tmmappingId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DevelopmentPriorities[]> GetManagerDevPrioritiesAsync(int userId, int PoeId, int tmmappingId) {
            return base.Channel.GetManagerDevPrioritiesAsync(userId, PoeId, tmmappingId);
        }
        
        public bExcellent.Service.Util.Domain.GoalDate GetTeamGoalDate(int userId, int poeId, int tmid) {
            return base.Channel.GetTeamGoalDate(userId, poeId, tmid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.GoalDate> GetTeamGoalDateAsync(int userId, int poeId, int tmid) {
            return base.Channel.GetTeamGoalDateAsync(userId, poeId, tmid);
        }
        
        public bExcellent.Service.Util.Domain.DevelopmentPriorities[] GetSelfDevPriorities(int userid, int PoeId) {
            return base.Channel.GetSelfDevPriorities(userid, PoeId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.DevelopmentPriorities[]> GetSelfDevPrioritiesAsync(int userid, int PoeId) {
            return base.Channel.GetSelfDevPrioritiesAsync(userid, PoeId);
        }
        
        public void UpdateGoalDate(int tmid, System.DateTime goaldate) {
            base.Channel.UpdateGoalDate(tmid, goaldate);
        }
        
        public System.Threading.Tasks.Task UpdateGoalDateAsync(int tmid, System.DateTime goaldate) {
            return base.Channel.UpdateGoalDateAsync(tmid, goaldate);
        }
        
        public bExcellent.Service.Util.Domain.GoalDate GetSelfGoalDate(int userId, int poeId) {
            return base.Channel.GetSelfGoalDate(userId, poeId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.GoalDate> GetSelfGoalDateAsync(int userId, int poeId) {
            return base.Channel.GetSelfGoalDateAsync(userId, poeId);
        }
        
        public bExcellent.Service.Util.Domain.Results[] GetTeamDevProgress(int userid, int poeId, int tmid) {
            return base.Channel.GetTeamDevProgress(userid, poeId, tmid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Results[]> GetTeamDevProgressAsync(int userid, int poeId, int tmid) {
            return base.Channel.GetTeamDevProgressAsync(userid, poeId, tmid);
        }
        
        public bExcellent.Service.Util.Domain.Results[] GetManagerDevProgress(int userid, int poeId, int tmid) {
            return base.Channel.GetManagerDevProgress(userid, poeId, tmid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Results[]> GetManagerDevProgressAsync(int userid, int poeId, int tmid) {
            return base.Channel.GetManagerDevProgressAsync(userid, poeId, tmid);
        }
        
        public bExcellent.Service.Util.Domain.MinimizedPOE[] GetSubscripedPoeByResultMode(int userid) {
            return base.Channel.GetSubscripedPoeByResultMode(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.MinimizedPOE[]> GetSubscripedPoeByResultModeAsync(int userid) {
            return base.Channel.GetSubscripedPoeByResultModeAsync(userid);
        }
        
        public bExcellent.Service.Util.Domain.User[] GetUsersListByPoE(int poeid) {
            return base.Channel.GetUsersListByPoE(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetUsersListByPoEAsync(int poeid) {
            return base.Channel.GetUsersListByPoEAsync(poeid);
        }
        
        public bExcellent.Service.Util.Response.QuestionScore[] GetImportanceAnswer(int userid, int poeid) {
            return base.Channel.GetImportanceAnswer(userid, poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.QuestionScore[]> GetImportanceAnswerAsync(int userid, int poeid) {
            return base.Channel.GetImportanceAnswerAsync(userid, poeid);
        }
        
        public bExcellent.Service.Util.Response.QuestionScore[] GetDemographicAnswer(int userid, int poeid) {
            return base.Channel.GetDemographicAnswer(userid, poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.QuestionScore[]> GetDemographicAnswerAsync(int userid, int poeid) {
            return base.Channel.GetDemographicAnswerAsync(userid, poeid);
        }
        
        public bExcellent.Service.Util.Domain.User[] GetSurveyUsersListByPoE(int poeid) {
            return base.Channel.GetSurveyUsersListByPoE(poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> GetSurveyUsersListByPoEAsync(int poeid) {
            return base.Channel.GetSurveyUsersListByPoEAsync(poeid);
        }
        
        public bExcellent.Service.Util.Response.QuestionScore[] GetProductSurveyAnswer(int userid, int poeid) {
            return base.Channel.GetProductSurveyAnswer(userid, poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.QuestionScore[]> GetProductSurveyAnswerAsync(int userid, int poeid) {
            return base.Channel.GetProductSurveyAnswerAsync(userid, poeid);
        }
        
        public int GetUserFBStatus(int userid, int poeid, int type) {
            return base.Channel.GetUserFBStatus(userid, poeid, type);
        }
        
        public System.Threading.Tasks.Task<int> GetUserFBStatusAsync(int userid, int poeid, int type) {
            return base.Channel.GetUserFBStatusAsync(userid, poeid, type);
        }
        
        public bExcellent.Service.Util.Response.Notification GetUserNotificationsLatest(int userid) {
            return base.Channel.GetUserNotificationsLatest(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Notification> GetUserNotificationsLatestAsync(int userid) {
            return base.Channel.GetUserNotificationsLatestAsync(userid);
        }
        
        public void UpdateManagerSync(int userid) {
            base.Channel.UpdateManagerSync(userid);
        }
        
        public System.Threading.Tasks.Task UpdateManagerSyncAsync(int userid) {
            return base.Channel.UpdateManagerSyncAsync(userid);
        }
        
        public void UpdateDevlopmentPriorities(int userid) {
            base.Channel.UpdateDevlopmentPriorities(userid);
        }
        
        public System.Threading.Tasks.Task UpdateDevlopmentPrioritiesAsync(int userid) {
            return base.Channel.UpdateDevlopmentPrioritiesAsync(userid);
        }
        
        public bExcellent.Service.Util.Domain.UserRole[] GetUserRolesByProfileUpdated(int userid, int poeid) {
            return base.Channel.GetUserRolesByProfileUpdated(userid, poeid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.UserRole[]> GetUserRolesByProfileUpdatedAsync(int userid, int poeid) {
            return base.Channel.GetUserRolesByProfileUpdatedAsync(userid, poeid);
        }
        
        public void DeleteIncompleteFB(string feedbackId, int mode) {
            base.Channel.DeleteIncompleteFB(feedbackId, mode);
        }
        
        public System.Threading.Tasks.Task DeleteIncompleteFBAsync(string feedbackId, int mode) {
            return base.Channel.DeleteIncompleteFBAsync(feedbackId, mode);
        }
        
        public bExcellent.Service.Util.Response.Partner[] GetPartners(int userid) {
            return base.Channel.GetPartners(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetPartnersAsync(int userid) {
            return base.Channel.GetPartnersAsync(userid);
        }
        
        public void InsertSurveyAnswer(int questionId, int answerValue, string answer, int feedbackid) {
            base.Channel.InsertSurveyAnswer(questionId, answerValue, answer, feedbackid);
        }
        
        public System.Threading.Tasks.Task InsertSurveyAnswerAsync(int questionId, int answerValue, string answer, int feedbackid) {
            return base.Channel.InsertSurveyAnswerAsync(questionId, answerValue, answer, feedbackid);
        }
        
        public int CreateSurvey(int userid, int poeid, int partnerId) {
            return base.Channel.CreateSurvey(userid, poeid, partnerId);
        }
        
        public System.Threading.Tasks.Task<int> CreateSurveyAsync(int userid, int poeid, int partnerId) {
            return base.Channel.CreateSurveyAsync(userid, poeid, partnerId);
        }
        
        public void CompleteSurvey(int feedbackId) {
            base.Channel.CompleteSurvey(feedbackId);
        }
        
        public System.Threading.Tasks.Task CompleteSurveyAsync(int feedbackId) {
            return base.Channel.CompleteSurveyAsync(feedbackId);
        }
        
        public bExcellent.Service.Util.Response.PSESurvey GetCompletedAnswers(int feedbackid) {
            return base.Channel.GetCompletedAnswers(feedbackid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.PSESurvey> GetCompletedAnswersAsync(int feedbackid) {
            return base.Channel.GetCompletedAnswersAsync(feedbackid);
        }
        
        public void CreatePartner(int userid, string partnerName) {
            base.Channel.CreatePartner(userid, partnerName);
        }
        
        public System.Threading.Tasks.Task CreatePartnerAsync(int userid, string partnerName) {
            return base.Channel.CreatePartnerAsync(userid, partnerName);
        }
        
        public bool IsPartnerExist(int userId, string partnerName) {
            return base.Channel.IsPartnerExist(userId, partnerName);
        }
        
        public System.Threading.Tasks.Task<bool> IsPartnerExistAsync(int userId, string partnerName) {
            return base.Channel.IsPartnerExistAsync(userId, partnerName);
        }
        
        public bExcellent.Service.Util.Request.PPAResults[] GetPartnerResults(int userId, int partnerId) {
            return base.Channel.GetPartnerResults(userId, partnerId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Request.PPAResults[]> GetPartnerResultsAsync(int userId, int partnerId) {
            return base.Channel.GetPartnerResultsAsync(userId, partnerId);
        }
        
        public void UpdatePartner(int userId, int partnerId, string partnerName) {
            base.Channel.UpdatePartner(userId, partnerId, partnerName);
        }
        
        public System.Threading.Tasks.Task UpdatePartnerAsync(int userId, int partnerId, string partnerName) {
            return base.Channel.UpdatePartnerAsync(userId, partnerId, partnerName);
        }
        
        public void DeletePartner(int userId, int partnerId) {
            base.Channel.DeletePartner(userId, partnerId);
        }
        
        public System.Threading.Tasks.Task DeletePartnerAsync(int userId, int partnerId) {
            return base.Channel.DeletePartnerAsync(userId, partnerId);
        }
        
        public void UploadPlan(int userId, int partnerId, int poeid, string filnename, string extension, string realFileName) {
            base.Channel.UploadPlan(userId, partnerId, poeid, filnename, extension, realFileName);
        }
        
        public System.Threading.Tasks.Task UploadPlanAsync(int userId, int partnerId, int poeid, string filnename, string extension, string realFileName) {
            return base.Channel.UploadPlanAsync(userId, partnerId, poeid, filnename, extension, realFileName);
        }
        
        public void DeletePlan(int userid, int partnerId) {
            base.Channel.DeletePlan(userid, partnerId);
        }
        
        public System.Threading.Tasks.Task DeletePlanAsync(int userid, int partnerId) {
            return base.Channel.DeletePlanAsync(userid, partnerId);
        }
        
        public bExcellent.Service.Util.Domain.User[] LoadUserRolesbyPartner(int userid, int designationId) {
            return base.Channel.LoadUserRolesbyPartner(userid, designationId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadUserRolesbyPartnerAsync(int userid, int designationId) {
            return base.Channel.LoadUserRolesbyPartnerAsync(userid, designationId);
        }
        
        public bExcellent.Service.Util.Domain.Designation[] ListDesigantion(int userid) {
            return base.Channel.ListDesigantion(userid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.Designation[]> ListDesigantionAsync(int userid) {
            return base.Channel.ListDesigantionAsync(userid);
        }
        
        public bExcellent.Service.Util.Domain.User[] LoadTZUserRolesbyPartner(int userid, int designationId) {
            return base.Channel.LoadTZUserRolesbyPartner(userid, designationId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadTZUserRolesbyPartnerAsync(int userid, int designationId) {
            return base.Channel.LoadTZUserRolesbyPartnerAsync(userid, designationId);
        }
        
        public bExcellent.Service.Util.Response.Partner[] GetOverallPartners(int userid, int designationId) {
            return base.Channel.GetOverallPartners(userid, designationId);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Response.Partner[]> GetOverallPartnersAsync(int userid, int designationId) {
            return base.Channel.GetOverallPartnersAsync(userid, designationId);
        }
        
        public bExcellent.Service.Util.Domain.User[] LoadFilterPartners(int userid, int designationId, int currentUserid) {
            return base.Channel.LoadFilterPartners(userid, designationId, currentUserid);
        }
        
        public System.Threading.Tasks.Task<bExcellent.Service.Util.Domain.User[]> LoadFilterPartnersAsync(int userid, int designationId, int currentUserid) {
            return base.Channel.LoadFilterPartnersAsync(userid, designationId, currentUserid);
        }
    }
}
